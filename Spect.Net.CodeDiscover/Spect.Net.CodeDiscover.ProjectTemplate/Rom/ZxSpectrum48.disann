{
  "Labels": {
    "0": "START",
    "8": "ERROR_1",
    "16": "PRINT_A_1",
    "32": "NEXT_CHAR",
    "40": "FP_CALC",
    "48": "BC_SPACES",
    "56": "MASK_INT",
    "125": "SKIP_OVER",
    "4555": "START_NEW",
    "83": "ERROR_2",
    "5618": "PRINT_A_2",
    "28": "TEST_CHAR",
    "116": "CH_ADD_P1",
    "13147": "CALCULATE",
    "5790": "RESERVE",
    "72": "KEY_INT",
    "3082": "PO_MSG",
    "3092": "PO_TABLE",
    "3088": "PO_TOKENS",
    "3137": "PO_SEARCH",
    "3106": "PO_EACH",
    "3131": "PO_SAVE",
    "3125": "PO_TR_SP",
    "13759": "STK_PNTRS",
    "13150": "GEN_ENT_1",
    "13154": "GEN_ENT_2",
    "13157": "RE_ENTRY",
    "13164": "SCAN_ENT",
    "13184": "FIRST_3D",
    "13198": "ENT_TABLE",
    "13196": "DOUBLE_A",
    "13015": "FP_OP_ADDR",
    "12997": "stk_zero_const",
    "13000": "stk_one_const",
    "13004": "stk_half_const",
    "13006": "stk_pi_half_cons",
    "13011": "stk_ten_const",
    "13218": "fp_calc_2",
    "13225": "TEST_5_SP",
    "7941": "TEST_ROOM",
    "13236": "STACK_NUM",
    "13248": "MOVE_FP",
    "13254": "STK_DATA",
    "13256": "STK_CONST",
    "13278": "FORM_EXP",
    "13297": "STK_ZEROS",
    "13303": "SKIP_CONS",
    "13304": "SKIP_NEXT",
    "13318": "LOC_MEM",
    "13327": "get_mem_0",
    "13339": "stk_zero",
    "13357": "st_mem_0",
    "13372": "EXCHANGE",
    "13374": "SWAP_BYTE",
    "13418": "abs",
    "13428": "NEG_TEST",
    "13545": "TEST_ZERO"
  },
  "Comments": {
    "149": "All the tokens used by the Spectrum are expanded by reference to this table. The last code of each token is 'inverted' by having its bit 7 set.",
    "11": "The address reached by the interpreter is copied to the error pointer before proceeding.",
    "28": "Find out if the character is printable. Return if it is so.",
    "58": "The lower two bytes of the frame counter are incremented every 20 ms.",
    "67": "The highest byte of the frame counter is only incremented when the value of the lower two bytes is zero.",
    "3083": "The high byte of the last entry on the machine stack is made zero so as to suppress trailing spaces (see below).",
    "3088": "The base address of the token",
    "3091": "Save the code on the stack. (Range +00 - +5A; RND - COPY).",
    "3092": "Locate the required entry.",
    "3095": "Print the message/token.",
    "3097": "A 'space' will be printed before the message/token if required.",
    "3106": "Collect a code.",
    "3107": "Cancel any 'inverted bit'.",
    "3109": "Print the character.",
    "3112": "Collect the code again.",
    "3113": "Advance the pointer.",
    "3114": "The 'inverted bit' goes to the carry flag and signals the end of the message/token;",
    "3115": "otherwise jump back.",
    "3117": "For messages - D holds +00; for tokens - D holds +00 - +5A.",
    "3120": "Jump forward if the last character was a '$'.",
    "3124": "Return if the last character was any other before 'A'.",
    "3125": "Examine the value in D and return if it indicates a message, RND, INKEY$ or PI.",
    "3129": "All other cases will require a 'trailing space'.",
    "13147": "Presume a unary operation and therefore set HL to point to the start of the 'last value' on the calculator stack and DE one-past this floating-point number (STKEND).",
    "13151": "Either, transfer a single operation offset to BREG temporarily, or, when using the subroutine recursively pass the parameter to BREG to be used as a counter.",
    "13154": "The return address of the sub-routine is store in H'L'. This saves the pointer to the first literal. Entering the CALCULATOR at GEN-ENT-2 is used whenever BREG is in use as a",
    "13157": "A loop is now entered to handle each literal in the list that follows the calling instruction;",
    "13161": "so first, always set to STKEND. Go to the alternate register set, and fetch the literal for this loop.",
    "13163": "Make H'L' point to the next literal.",
    "13164": "This pointer is saved briefly on the machine stack. SCAN-ENT is used by the SINGLE CALCULATION subroutine to find the subroutine that is required.",
    "13165": "Test the A register.",
    "13166": "Separate the simple literals from the multi-purpose literals. Jump with literals 00 - 3D.",
    "13169": "Save the literal in D.",
    "13170": "Continue only with bits 5 & 6.",
    "13172": "Four right shifts make them now bits 1 & 2.",
    "13176": "The offsets required are 3E-41.",
    "13178": "And L will now hold double the required offset.",
    "13180": "Now produce the parameter by taking bits 0,1,2,3 & 4 of the literal; keep the parameter in A.",
    "13184": "Jump forward if performing a unary operation.",
    "13188": "All of the subroutines that perform binary operations require that HL points to the first operand",
    "13189": "and DE points to the second operand (the 'last value') as they appear on the calculator stack.",
    "13196": "As each entry in the table of addresses takes up two bytes the offset produced is doubled.",
    "13015": "\"jump-true\", \"exchange\", \"delete\", \"subtract\"",
    "13023": "\"multiply\", \"division\", \"to-power\", \"or\"",
    "13031": "\"no-&-no\", \"no-l-eql\", \"no-gr-eq\", \"nos-neql\"",
    "13039": "\"no-grtr\", \"no-less\", \"nos-eql\", \"addition\"",
    "13047": "\"str-&-no\", \"str-l-eql\", \"str-gr-eq\", \"strs-neql\"",
    "13055": "\"str-grtr\", \"str-less\", \"strs-eql\", \"strs-add\"",
    "13063": "\"val$\", \"usr-$\", \"read-in\", \"negate\"",
    "13071": "\"code\", \"val\", \"len\", \"sin\"",
    "13079": "\"cos\", \"tan\", \"asn\", \"acs\" ",
    "13087": "\"atn\", \"ln\", \"exp\", \"int\"",
    "13095": "\"sqr\", \"sgn\", \"abs\", \"peek\"",
    "13103": "\"in\", \"usr-no\", \"str$\", \"chr$\"",
    "13111": "\"not\", \"duplicate\", \"n-mod-m\", \"jump\"",
    "13119": "\"stk-data\", \"dec-jr-nz\", \"less-0\", \"greater-0\"",
    "13127": "\"end-calc\", \"get-argt\", \"truncate\", \"fp-calc-2\"",
    "13135": "\"e-to-fp\", \"re-stack\", \"series-06\", \"stk-zero\"",
    "13143": "\"st-mem-0\", \"get-mem-0\"",
    "13198": "The base address of the table.",
    "13201": "The address of the required table entry is formed in HL;",
    "13203": "and the required subroutine address is loaded into the DE register pair.",
    "13211": "The RE-ENTRY is put on the machine stack underneath the subroutine address.",
    "13212": "Return to the main set of registers.",
    "13213": "The current value of BREG is transferred to the B register thereby returning the single operation offset.",
    "13217": "An indirect jump to the required subroutine.",
    "13218": "Discard the RE-ENTRY address.",
    "13219": "Transfer the offset to A.",
    "13222": "Enter the alternate register set.",
    "13223": "Jump back to find the required address; stack the RE-ENTRY address and jump to the subroutine for the operation.",
    "13225": "Save DE briefly.",
    "13226": "Save HL briefly.",
    "13227": "Specify the test is for 5 bytes.",
    "13230": "Make the test.",
    "13233": "Restore HL.",
    "13234": "Restore DE.",
    "13235": "Finished.",
    "13236": "Copy STKEND to DE as destination address.",
    "13240": "Move the number.",
    "13243": "Reset STKEND from DE.",
    "13247": "Finished.",
    "13248": "A test is made for room.",
    "13251": "Move the five bytes involved.",
    "13253": "Finished.",
    "13254": "This subroutine performs the manipulatory operation of adding a 'last value' to the calculator stack; hence HL is set to point one-past the present 'last value' and hence point to the result.",
    "13256": "Now test that there is indeed",
    "13259": "Go to the alternate register set and stack the pointer to the next literal.",
    "13262": "Switch over the result pointer and the next literal pointer.",
    "13263": "Save BC briefly.",
    "13264": "The first literal is put into A and divided by Hex.40 to give the integer values 0, 1, 2 or 3.",
    "13270": "The integer value is transferred to C and incremented, thereby giving the range 1, 2, 3 or 4 for the number of literals that will be needed.",
    "13271": "The literal is fetch anew, reduced mod Hex.40 and discarded as inappropriate if the remainder if zero;",
    "13276": "in which case the next literal is fetched and used unreduced.",
    "13278": "The exponent, e, is formed by the addition of Hex.50 and passed to the calculator stack as the first of the five bytes of the result.",
    "13281": "The number of literals specified in C are taken from the source and entered into the bytes of the result.",
    "13290": "Restore BC.",
    "13291": "Return the result pointer to HL and the next literal pointer to its usual position in H' & L'.",
    "13295": "The number of zero bytes required at this stage is given by 5-C-1; and this number of zeros is added to the result to make up the required five bytes.",
    "13303": "The subroutine returns if the parameter is zero, or when the requested constant has been reached.",
    "13305": "Save the parameter.",
    "13306": "Save the result pointer.",
    "13307": "The dummy address.",
    "13310": "Perform imaginary stacking of an expanded constant.",
    "13313": "Restore the result pointer.",
    "13314": "Restore the parameter.",
    "13315": "Count the loops.",
    "13316": "Jump back to consider the value of the counter.",
    "13318": "Copy the parameter to C.",
    "13319": "Double the parameter.",
    "13320": "Double the result.",
    "13321": "Add the value of the parameter to give five times the original value.",
    "13322": "This result is wanted in the BC register pair.",
    "13325": "Produce the new base address.",
    "13326": "Finished.",
    "13327": "Save the result pointer.",
    "13328": "Fetch the pointer to the current memory area (see above).",
    "13331": "The base address is found.",
    "13334": "The five bytes are moved.",
    "13337": "Set the result pointer.",
    "13338": "Finished.",
    "13339": "Set HL to hold the result pointer.",
    "13346": "Go to the alternate register set and save the next literal pointer.",
    "13343": "The base address of the calculator's table of constants.",
    "13347": "Find the requested base address.",
    "13350": "Expand the constant.",
    "13354": "Restore the next literal pointer.",
    "13356": "Finished.",
    "13357": "Save the result pointer.",
    "13358": "Source to DE briefly.",
    "13359": "Fetch the pointer to the current memory area.",
    "13362": "The base address is found.",
    "13369": "'Last value' +5, i.e. STKEND, to DE.",
    "13365": "Exchange source and destination pointers.",
    "13366": "The five bytes are moved.",
    "13370": "Result pointer to HL.",
    "13371": "Finished.",
    "13372": "There are five bytes involved.",
    "13374": "Each byte of the second number.",
    "13375": "Each byte of the first number.",
    "13376": "Switch source and destination.",
    "13377": "Now to the first number.",
    "13378": "Now to the second number.",
    "13379": "Move to consider the next pair of bytes.",
    "13381": "Exchange the five bytes.",
    "13383": "Get the pointers correct as the number 5 is an odd number.",
    "13384": "Finished.",
    "13418": "B is set to FF hex.",
    "13420": "The jump is made into 'unary minus'.",
    "13422": "If the number is zero, the subroutine returns leaving 00 00 00 00 00 unchanged.",
    "13426": "B is set to +00 hex for 'negate'.",
    "13428": "If the first byte is zero, the jump is made to deal with a 'small integer'.",
    "13432": "Point to the second byte."
  },
  "PrefixComments": {
    "149": "THE TOKEN TABLE",
    "19": "Unused",
    "37": "Unused",
    "43": "Unused",
    "8": "THE 'ERROR' RESTART: The error pointer is made to point to the position of the error.",
    "16": "THE 'PRINT A CHARACTER' RESTART: The A register holds the code of the character that is to be printed.",
    "24": "THE 'COLLECT CHARACTER' RESTART: The contents of the location currently addressed by CH-ADD are fetched. A return is made if the value represents a printable character, otherwise CH-ADD is incremented and the tests repeated.",
    "32": "THE 'COLLECT NEXT CHARACTER' RESTART: As a BASIC line is interpreted, this routine is called repeatedly to step along the line.",
    "40": "THE 'CALCULATOR' RESTART: The floating point calculator is entered at CALCULATE.",
    "48": "THE 'MAKE BC SPACES' RESTART: This routine creates free locations in the work space. The number of locations is determined by the current contents of the BC register pair.",
    "56": "THE 'MASKABLE INTERRUPT' ROUTINE: The real time clock is incremented and the keyboard scanned whenever a maskable interrupt occurs.",
    "3082": "THE 'MESSAGE PRINTING' SUBROUTINE: This subroutine is used to print messages and tokens. The A register holds the 'entry number' of the message or token in a table. The DE register pair holds the base address of the table.",
    "3088": "Enter here when expanding token codes.",
    "3092": "The table is searched and the correct entry printed.",
    "3117": "Now consider whether a 'trailing space' is required.",
    "3106": "The characters of the message/token are printed in turn.",
    "13147": "THE 'CALCULATE' SUBROUTINE: This subroutine is used to perform floating-point calculations. These can be considered to be of three types: I) Binary operations, e.g. addition, where two numbers in floating-point form are added together to give one 'last value'. II) Unary operations, e.g. sin, where the 'last value' is changed to give the appropriate function result as a new 'last value'. III) Manipulatory operations, e.g. st-mem-0, where the 'last value' is copied to the first five bytes of the calculator's memory area.",
    "13015": "THE TABLE OF ADDRESSES: This second table is a look-up table of the addresses of the sixty-six operational subroutines of the calculator. The offsets used to index into the table are derived either from the operation codes used in SCANNING, see 2734, etc., or from the literals that follow a RST 0028 instruction.",
    "12997": "THE TABLE OF CONSTANTS: This first table holds the five useful and frequently needed numbers zero, one, a half, a half of pi and ten. The numbers are held in a condensed form which is expanded by the STACK LITERALS subroutine, see below, to give the required floating-point form.",
    "13218": "THE 'SINGLE OPERATION' SUBROUTINE: (Offset 3B: 'fp-calc-2') This subroutine is only called from SCANNING at 2757 hex and is used to perform a single arithmetic operation. The offset that specifies which operation is to be performed is supplied to the calculator in the B register and subsequently transferred to the system variable BREG. The effect of calling this subroutine is essentially to make a jump to the appropriate subroutine for the single operation.",
    "13225": "THE 'TEST 5-SPACES' SUBROUTINE: This subroutine tests whether there is sufficient room in memory for another 5-byte floating-point number to be added to the calculator stack.",
    "13236": "THE 'STACK NUMBER' SUBROUTINE: This subroutine is called by BEEP and SCANNING twice to copy STKEND to DE, move a floating-point number to the calculator stack, and reset STKEND from DE. It calls 'MOVE-FP' to do the actual move.",
    "13248": "THE 'MOVE A FLOATING-POINT NUMBER' SUBROUTINE: (Offset 31: 'duplicate') This subroutine moves a floating-point number to the top of the calculator stack (3 cases) or from the top of the stack to the calculator's memory area (1 case). It is also called through the calculator when it simply duplicates the number at the top of the calculator stack, the 'last value', thereby extending the stack by five bytes.",
    "13254": "THE 'STACK LITERALS' SUBROUTINE: This subroutine places on the calculator stack, as a 'last value', the floating-point number supplied to it as 2, 3, 4 or 5 literals. In each case, the first literal supplied is divided by Hex.40, and the integer quotient plus 1 determines whether 1, 2, 3 or 4 further literals will be taken from the source to form the mantissa of the number. Any unfilled bytes of the five bytes that go to form a 5-byte floating-point number are set to zero. The first literal is also used to determine the exponent, after reducing mod Hex.40, unless the remainder is zero, in which case the second literal is used, as it stands, without reducing mod Hex.40. In either case, Hex.50 is added to the literal, giving the augmented exponent byte, e (the true exponent e' plus Hex.80). The rest of the 5 bytes are stacked, including any zeros needed, and the subroutine returns.",
    "13303": "THE 'SKIP CONSTANTS' SUBROUTINE: This subroutine is entered with the HL register pair holding the base address of the calculator's table of constants and the A register holding a parameter that shows which of the five constants is being requested.",
    "13318": "THE 'MEMORY LOCATION' SUBROUTINE: This subroutine finds the base address for each five byte portion of the calculator's memory area to or from which a floating-point number is to be moved from or to the calculator stack. It does this operation by adding five times the parameter supplied to the base address for the area which is held in the HL register pair. Note that when a FOR-NEXT variable is being handled then the pointers are changed so that the variable is treated as if it were the calculator's memory area (see address 1D20).",
    "13327": "THE 'GET FROM MEMORY AREA' SUBROUTINE: (Offsets E0 to E5: 'get-mem-0' to 'get-mem-5') This subroutine is called using the literals E0 to E5 and the parameter derived from these literals is held in the A register. The subroutine calls MEMORY LOCATION to put the required source address into the HL register pair and MOVE A FLOATING-POINT NUMBER to copy the five bytes involved from the calculator's memory area to the top of the calculator stack to form a new 'last value'.",
    "13339": "THE 'STACK A CONSTANT' SUBROUTINE: (offsets A0 to A4: 'stk-zero','stk-one','stk-half','stk-pi/2' & 'stk-ten') This subroutine uses SKIP CONSTANTS to find the base address of the requested constants from the calculator's table of constants and then calls STACK LITERALS, entering at STK-CONST, to make the expanded form of the constant the 'last value' on the calculator stack.",
    "13357": "THE 'STORE IN MEMORY AREA' SUBROUTINE: (Offsets C0 to C5: 'st-mem-0' to 'st-mem-5') This subroutine is called using the literals C0 to C5 and the parameter derived from these literals is held in the A register. This subroutine is very similar to the GET FROM MEMORY subroutine but the source and destination pointers are exchanged.",
    "13372": "THE 'EXCHANGE' SUBROUTINE: (Offset 01: 'exchange') This binary operation 'exchanges' the first number with the second number, i.e. the topmost two numbers on the calculator stack are exchanged.",
    "13418": "THE 'ABSOLUTE MAGNITUDE' FUNCTION: (Offset 2A: 'abs') This subroutine performs its unary operation by ensuring that the sign bit of a floating-point number is reset.",
    "13428": "'ABS' enters here."
  },
  "Literals": {
    "1218": [
      "$SaveBytesRoutineAddress"
    ],
    "0": [
      "$SaveBytesResumeAddress"
    ],
    "1388": [
      "$LoadBytesRoutineAddress"
    ],
    "1506": [
      "$LoadBytesResumeAddress"
    ],
    "1462": [
      "$LoadBytesInvalidHeaderAddress"
    ],
    "149": [
      "$TokenTableAddress",
      "TOKEN_TABLE"
    ],
    "91": [
      "$TokenCount"
    ],
    "165": [
      "$TokenOffset"
    ],
    "23645": [
      "CH_ADD"
    ],
    "23647": [
      "X_PTR"
    ],
    "125": [
      "SKIP_OVER"
    ],
    "23649": [
      "WORKSPC"
    ],
    "23672": [
      "FRAMES"
    ],
    "23655": [
      "BREG"
    ],
    "23653": [
      "STKEND"
    ],
    "13015": [
      "FP_OP_ADDR"
    ],
    "13157": [
      "RE_ENTRY"
    ],
    "23654": [
      "STK_END_hi"
    ],
    "23656": [
      "MEM"
    ],
    "12997": [
      "stk_zero_const"
    ]
  },
  "LiteralReplacements": {
    "8": "CH_ADD",
    "11": "X_PTR",
    "24": "CH_ADD",
    "49": "WORKSPC",
    "62": "FRAMES",
    "58": "FRAMES",
    "3088": "TOKEN_TABLE",
    "13151": "BREG",
    "13157": "STKEND",
    "13198": "FP_OP_ADDR",
    "13207": "RE_ENTRY",
    "13213": "STK_END_hi",
    "13219": "BREG",
    "13236": "STKEND",
    "13243": "STKEND",
    "13328": "MEM",
    "13343": "stk_zero_const",
    "13359": "MEM"
  },
  "MemorySections": [
    {
      "StartAddress": 0,
      "EndAddress": 18,
      "SectionType": 1
    },
    {
      "StartAddress": 19,
      "EndAddress": 23,
      "SectionType": 2
    },
    {
      "StartAddress": 24,
      "EndAddress": 36,
      "SectionType": 1
    },
    {
      "StartAddress": 37,
      "EndAddress": 39,
      "SectionType": 2
    },
    {
      "StartAddress": 40,
      "EndAddress": 42,
      "SectionType": 1
    },
    {
      "StartAddress": 43,
      "EndAddress": 47,
      "SectionType": 2
    },
    {
      "StartAddress": 48,
      "EndAddress": 148,
      "SectionType": 1
    },
    {
      "StartAddress": 149,
      "EndAddress": 516,
      "SectionType": 2
    },
    {
      "StartAddress": 517,
      "EndAddress": 12996,
      "SectionType": 1
    },
    {
      "StartAddress": 12997,
      "EndAddress": 12999,
      "SectionType": 2
    },
    {
      "StartAddress": 13000,
      "EndAddress": 13003,
      "SectionType": 2
    },
    {
      "StartAddress": 13004,
      "EndAddress": 13005,
      "SectionType": 2
    },
    {
      "StartAddress": 13006,
      "EndAddress": 13010,
      "SectionType": 2
    },
    {
      "StartAddress": 13011,
      "EndAddress": 13014,
      "SectionType": 2
    },
    {
      "StartAddress": 13015,
      "EndAddress": 13146,
      "SectionType": 3
    },
    {
      "StartAddress": 13147,
      "EndAddress": 16383,
      "SectionType": 1
    },
    {
      "StartAddress": 23296,
      "EndAddress": 23551,
      "SectionType": 0
    },
    {
      "StartAddress": 23552,
      "EndAddress": 65535,
      "SectionType": 2
    }
  ]
}