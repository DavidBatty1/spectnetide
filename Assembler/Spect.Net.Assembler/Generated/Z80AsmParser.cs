//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\dotne\Source\Repos\spectnetide\Assembler\AntlrZ80AsmParserGenerator\ParserGenerator\Z80Asm.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Spect.Net.Assembler.Generated {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class Z80AsmParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		COMMENT=81, WS=82, NEWLINE=83, NOP=84, RLCA=85, RRCA=86, RLA=87, RRA=88, 
		DAA=89, CPL=90, SCF=91, CCF=92, HALT=93, RET=94, EXX=95, DI=96, EI=97, 
		NEG=98, RETN=99, RETI=100, RLD=101, RRD=102, LDI=103, CPI=104, INI=105, 
		OUTI=106, LDD=107, CPD=108, IND=109, OUTD=110, LDIR=111, CPIR=112, INIR=113, 
		OTIR=114, LDDR=115, CPDR=116, INDR=117, OTDR=118, LD=119, INC=120, DEC=121, 
		EX=122, ADD=123, ADC=124, SUB=125, SBC=126, AND=127, XOR=128, OR=129, 
		CP=130, DJNZ=131, JR=132, JP=133, CALL=134, RST=135, PUSH=136, POP=137, 
		IN=138, OUT=139, IM=140, RLC=141, RRC=142, RL=143, RR=144, SLA=145, SRA=146, 
		SLL=147, SRL=148, BIT=149, RES=150, SET=151, IFDEF=152, IFNDEF=153, ENDIF=154, 
		ELSE=155, DEFINE=156, UNDEF=157, INCLUDE=158, IF=159, ORGPRAG=160, ENTPRAG=161, 
		EQUPRAG=162, DISPRAG=163, DBPRAG=164, DWPRAG=165, DMPRAG=166, SKIPRAG=167, 
		EXTPRAG=168, DECNUM=169, HEXNUM=170, HDIGIT=171, DIGIT=172, CHAR=173, 
		STRING=174, FSTRING=175, IDENTIFIER=176, IDSTART=177, IDCONT=178;
	public const int
		RULE_compileUnit = 0, RULE_asmline = 1, RULE_label = 2, RULE_comment = 3, 
		RULE_pragma = 4, RULE_directive = 5, RULE_includeDirective = 6, RULE_orgPragma = 7, 
		RULE_entPragma = 8, RULE_dispPragma = 9, RULE_equPragma = 10, RULE_defbPragma = 11, 
		RULE_defwPragma = 12, RULE_defmPragma = 13, RULE_skipPragma = 14, RULE_externPragma = 15, 
		RULE_operation = 16, RULE_trivialOperation = 17, RULE_compoundOperation = 18, 
		RULE_operand = 19, RULE_reg8 = 20, RULE_reg8Idx = 21, RULE_reg8Spec = 22, 
		RULE_reg16 = 23, RULE_reg16Idx = 24, RULE_reg16Spec = 25, RULE_regIndirect = 26, 
		RULE_cPort = 27, RULE_memIndirect = 28, RULE_indexedAddr = 29, RULE_condition = 30, 
		RULE_expr = 31, RULE_orExpr = 32, RULE_xorExpr = 33, RULE_andExpr = 34, 
		RULE_equExpr = 35, RULE_relExpr = 36, RULE_shiftExpr = 37, RULE_addExpr = 38, 
		RULE_multExpr = 39, RULE_unaryExpr = 40, RULE_literalExpr = 41, RULE_symbolExpr = 42;
	public static readonly string[] ruleNames = {
		"compileUnit", "asmline", "label", "comment", "pragma", "directive", "includeDirective", 
		"orgPragma", "entPragma", "dispPragma", "equPragma", "defbPragma", "defwPragma", 
		"defmPragma", "skipPragma", "externPragma", "operation", "trivialOperation", 
		"compoundOperation", "operand", "reg8", "reg8Idx", "reg8Spec", "reg16", 
		"reg16Idx", "reg16Spec", "regIndirect", "cPort", "memIndirect", "indexedAddr", 
		"condition", "expr", "orExpr", "xorExpr", "andExpr", "equExpr", "relExpr", 
		"shiftExpr", "addExpr", "multExpr", "unaryExpr", "literalExpr", "symbolExpr"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "','", "'a'", "'A'", "'b'", "'B'", "'c'", "'C'", "'d'", "'D'", 
		"'e'", "'E'", "'h'", "'H'", "'l'", "'L'", "'xl'", "'XL'", "'xh'", "'XH'", 
		"'yl'", "'YL'", "'yh'", "'YH'", "'i'", "'I'", "'r'", "'R'", "'bc'", "'BC'", 
		"'de'", "'DE'", "'hl'", "'HL'", "'sp'", "'SP'", "'ix'", "'IX'", "'iy'", 
		"'IY'", "'af''", "'AF''", "'af'", "'AF'", "'('", "')'", "'+'", "'-'", 
		"'['", "']'", "'z'", "'Z'", "'nz'", "'NZ'", "'nc'", "'NC'", "'po'", "'PO'", 
		"'pe'", "'PE'", "'p'", "'P'", "'m'", "'M'", "'?'", "'|'", "'^'", "'&'", 
		"'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'<<'", "'>>'", "'*'", "'/'", 
		"'%'", "'$'", null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "'#ifdef'", "'#ifndef'", "'#endif'", "'#else'", "'#define'", "'#undef'", 
		"'#include'", "'#if'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "COMMENT", "WS", 
		"NEWLINE", "NOP", "RLCA", "RRCA", "RLA", "RRA", "DAA", "CPL", "SCF", "CCF", 
		"HALT", "RET", "EXX", "DI", "EI", "NEG", "RETN", "RETI", "RLD", "RRD", 
		"LDI", "CPI", "INI", "OUTI", "LDD", "CPD", "IND", "OUTD", "LDIR", "CPIR", 
		"INIR", "OTIR", "LDDR", "CPDR", "INDR", "OTDR", "LD", "INC", "DEC", "EX", 
		"ADD", "ADC", "SUB", "SBC", "AND", "XOR", "OR", "CP", "DJNZ", "JR", "JP", 
		"CALL", "RST", "PUSH", "POP", "IN", "OUT", "IM", "RLC", "RRC", "RL", "RR", 
		"SLA", "SRA", "SLL", "SRL", "BIT", "RES", "SET", "IFDEF", "IFNDEF", "ENDIF", 
		"ELSE", "DEFINE", "UNDEF", "INCLUDE", "IF", "ORGPRAG", "ENTPRAG", "EQUPRAG", 
		"DISPRAG", "DBPRAG", "DWPRAG", "DMPRAG", "SKIPRAG", "EXTPRAG", "DECNUM", 
		"HEXNUM", "HDIGIT", "DIGIT", "CHAR", "STRING", "FSTRING", "IDENTIFIER", 
		"IDSTART", "IDCONT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Z80Asm.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Z80AsmParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(Z80AsmParser.Eof, 0); }
		public AsmlineContext[] asmline() {
			return GetRuleContexts<AsmlineContext>();
		}
		public AsmlineContext asmline(int i) {
			return GetRuleContext<AsmlineContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(Z80AsmParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(Z80AsmParser.NEWLINE, i);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			int _alt;
			State = 113;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Eof:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; Match(Eof);
				}
				break;
			case COMMENT:
			case NEWLINE:
			case NOP:
			case RLCA:
			case RRCA:
			case RLA:
			case RRA:
			case DAA:
			case CPL:
			case SCF:
			case CCF:
			case HALT:
			case RET:
			case EXX:
			case DI:
			case EI:
			case NEG:
			case RETN:
			case RETI:
			case RLD:
			case RRD:
			case LDI:
			case CPI:
			case INI:
			case OUTI:
			case LDD:
			case CPD:
			case IND:
			case OUTD:
			case LDIR:
			case CPIR:
			case INIR:
			case OTIR:
			case LDDR:
			case CPDR:
			case INDR:
			case OTDR:
			case LD:
			case INC:
			case DEC:
			case EX:
			case ADD:
			case ADC:
			case SUB:
			case SBC:
			case AND:
			case XOR:
			case OR:
			case CP:
			case DJNZ:
			case JR:
			case JP:
			case CALL:
			case RST:
			case PUSH:
			case POP:
			case IN:
			case OUT:
			case IM:
			case RLC:
			case RRC:
			case RL:
			case RR:
			case SLA:
			case SRA:
			case SLL:
			case SRL:
			case BIT:
			case RES:
			case SET:
			case IFDEF:
			case IFNDEF:
			case ENDIF:
			case ELSE:
			case DEFINE:
			case UNDEF:
			case INCLUDE:
			case IF:
			case ORGPRAG:
			case ENTPRAG:
			case EQUPRAG:
			case DISPRAG:
			case DBPRAG:
			case DWPRAG:
			case DMPRAG:
			case SKIPRAG:
			case EXTPRAG:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 90;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 87; Match(NEWLINE);
					}
					}
					State = 92;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 93; asmline();
				State = 102;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 95;
						_errHandler.Sync(this);
						_la = _input.La(1);
						do {
							{
							{
							State = 94; Match(NEWLINE);
							}
							}
							State = 97;
							_errHandler.Sync(this);
							_la = _input.La(1);
						} while ( _la==NEWLINE );
						State = 99; asmline();
						}
						} 
					}
					State = 104;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
				}
				State = 108;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 105; Match(NEWLINE);
					}
					}
					State = 110;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 111; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsmlineContext : ParserRuleContext {
		public PragmaContext pragma() {
			return GetRuleContext<PragmaContext>(0);
		}
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		public IncludeDirectiveContext includeDirective() {
			return GetRuleContext<IncludeDirectiveContext>(0);
		}
		public AsmlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asmline; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterAsmline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitAsmline(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsmline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsmlineContext asmline() {
		AsmlineContext _localctx = new AsmlineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_asmline);
		int _la;
		try {
			State = 131;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NOP:
			case RLCA:
			case RRCA:
			case RLA:
			case RRA:
			case DAA:
			case CPL:
			case SCF:
			case CCF:
			case HALT:
			case RET:
			case EXX:
			case DI:
			case EI:
			case NEG:
			case RETN:
			case RETI:
			case RLD:
			case RRD:
			case LDI:
			case CPI:
			case INI:
			case OUTI:
			case LDD:
			case CPD:
			case IND:
			case OUTD:
			case LDIR:
			case CPIR:
			case INIR:
			case OTIR:
			case LDDR:
			case CPDR:
			case INDR:
			case OTDR:
			case LD:
			case INC:
			case DEC:
			case EX:
			case ADD:
			case ADC:
			case SUB:
			case SBC:
			case AND:
			case XOR:
			case OR:
			case CP:
			case DJNZ:
			case JR:
			case JP:
			case CALL:
			case RST:
			case PUSH:
			case POP:
			case IN:
			case OUT:
			case IM:
			case RLC:
			case RRC:
			case RL:
			case RR:
			case SLA:
			case SRA:
			case SLL:
			case SRL:
			case BIT:
			case RES:
			case SET:
			case ORGPRAG:
			case ENTPRAG:
			case EQUPRAG:
			case DISPRAG:
			case DBPRAG:
			case DWPRAG:
			case DMPRAG:
			case SKIPRAG:
			case EXTPRAG:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==IDENTIFIER) {
					{
					State = 115; label();
					}
				}

				State = 120;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ORGPRAG:
				case ENTPRAG:
				case EQUPRAG:
				case DISPRAG:
				case DBPRAG:
				case DWPRAG:
				case DMPRAG:
				case SKIPRAG:
				case EXTPRAG:
					{
					State = 118; pragma();
					}
					break;
				case NOP:
				case RLCA:
				case RRCA:
				case RLA:
				case RRA:
				case DAA:
				case CPL:
				case SCF:
				case CCF:
				case HALT:
				case RET:
				case EXX:
				case DI:
				case EI:
				case NEG:
				case RETN:
				case RETI:
				case RLD:
				case RRD:
				case LDI:
				case CPI:
				case INI:
				case OUTI:
				case LDD:
				case CPD:
				case IND:
				case OUTD:
				case LDIR:
				case CPIR:
				case INIR:
				case OTIR:
				case LDDR:
				case CPDR:
				case INDR:
				case OTDR:
				case LD:
				case INC:
				case DEC:
				case EX:
				case ADD:
				case ADC:
				case SUB:
				case SBC:
				case AND:
				case XOR:
				case OR:
				case CP:
				case DJNZ:
				case JR:
				case JP:
				case CALL:
				case RST:
				case PUSH:
				case POP:
				case IN:
				case OUT:
				case IM:
				case RLC:
				case RRC:
				case RL:
				case RR:
				case SLA:
				case SRA:
				case SLL:
				case SRL:
				case BIT:
				case RES:
				case SET:
					{
					State = 119; operation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 123;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMENT) {
					{
					State = 122; comment();
					}
				}

				}
				break;
			case IFDEF:
			case IFNDEF:
			case ENDIF:
			case ELSE:
			case DEFINE:
			case UNDEF:
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 125; directive();
				State = 127;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMENT) {
					{
					State = 126; comment();
					}
				}

				}
				break;
			case COMMENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 129; comment();
				}
				break;
			case INCLUDE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 130; includeDirective();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_label);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(IDENTIFIER);
			State = 135;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__0) {
				{
				State = 134; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(Z80AsmParser.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaContext : ParserRuleContext {
		public OrgPragmaContext orgPragma() {
			return GetRuleContext<OrgPragmaContext>(0);
		}
		public EntPragmaContext entPragma() {
			return GetRuleContext<EntPragmaContext>(0);
		}
		public DispPragmaContext dispPragma() {
			return GetRuleContext<DispPragmaContext>(0);
		}
		public EquPragmaContext equPragma() {
			return GetRuleContext<EquPragmaContext>(0);
		}
		public DefbPragmaContext defbPragma() {
			return GetRuleContext<DefbPragmaContext>(0);
		}
		public DefwPragmaContext defwPragma() {
			return GetRuleContext<DefwPragmaContext>(0);
		}
		public DefmPragmaContext defmPragma() {
			return GetRuleContext<DefmPragmaContext>(0);
		}
		public SkipPragmaContext skipPragma() {
			return GetRuleContext<SkipPragmaContext>(0);
		}
		public ExternPragmaContext externPragma() {
			return GetRuleContext<ExternPragmaContext>(0);
		}
		public PragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaContext pragma() {
		PragmaContext _localctx = new PragmaContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_pragma);
		try {
			State = 148;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ORGPRAG:
				EnterOuterAlt(_localctx, 1);
				{
				State = 139; orgPragma();
				}
				break;
			case ENTPRAG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 140; entPragma();
				}
				break;
			case DISPRAG:
				EnterOuterAlt(_localctx, 3);
				{
				State = 141; dispPragma();
				}
				break;
			case EQUPRAG:
				EnterOuterAlt(_localctx, 4);
				{
				State = 142; equPragma();
				}
				break;
			case DBPRAG:
				EnterOuterAlt(_localctx, 5);
				{
				State = 143; defbPragma();
				}
				break;
			case DWPRAG:
				EnterOuterAlt(_localctx, 6);
				{
				State = 144; defwPragma();
				}
				break;
			case DMPRAG:
				EnterOuterAlt(_localctx, 7);
				{
				State = 145; defmPragma();
				}
				break;
			case SKIPRAG:
				EnterOuterAlt(_localctx, 8);
				{
				State = 146; skipPragma();
				}
				break;
			case EXTPRAG:
				EnterOuterAlt(_localctx, 9);
				{
				State = 147; externPragma();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode IFDEF() { return GetToken(Z80AsmParser.IFDEF, 0); }
		public ITerminalNode IFNDEF() { return GetToken(Z80AsmParser.IFNDEF, 0); }
		public ITerminalNode DEFINE() { return GetToken(Z80AsmParser.DEFINE, 0); }
		public ITerminalNode UNDEF() { return GetToken(Z80AsmParser.UNDEF, 0); }
		public ITerminalNode ENDIF() { return GetToken(Z80AsmParser.ENDIF, 0); }
		public ITerminalNode ELSE() { return GetToken(Z80AsmParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(Z80AsmParser.IF, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_directive);
		int _la;
		try {
			State = 156;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IFDEF:
			case IFNDEF:
			case DEFINE:
			case UNDEF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 150;
				_la = _input.La(1);
				if ( !(((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & ((1L << (IFDEF - 152)) | (1L << (IFNDEF - 152)) | (1L << (DEFINE - 152)) | (1L << (UNDEF - 152)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 151; Match(IDENTIFIER);
				}
				break;
			case ENDIF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 152; Match(ENDIF);
				}
				break;
			case ELSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 153; Match(ELSE);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 4);
				{
				State = 154; Match(IF);
				State = 155; expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeDirectiveContext : ParserRuleContext {
		public ITerminalNode INCLUDE() { return GetToken(Z80AsmParser.INCLUDE, 0); }
		public ITerminalNode STRING() { return GetToken(Z80AsmParser.STRING, 0); }
		public ITerminalNode FSTRING() { return GetToken(Z80AsmParser.FSTRING, 0); }
		public IncludeDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_includeDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIncludeDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIncludeDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncludeDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeDirectiveContext includeDirective() {
		IncludeDirectiveContext _localctx = new IncludeDirectiveContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_includeDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; Match(INCLUDE);
			State = 159;
			_la = _input.La(1);
			if ( !(_la==STRING || _la==FSTRING) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrgPragmaContext : ParserRuleContext {
		public ITerminalNode ORGPRAG() { return GetToken(Z80AsmParser.ORGPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OrgPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orgPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOrgPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOrgPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrgPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrgPragmaContext orgPragma() {
		OrgPragmaContext _localctx = new OrgPragmaContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_orgPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(ORGPRAG);
			State = 162; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntPragmaContext : ParserRuleContext {
		public ITerminalNode ENTPRAG() { return GetToken(Z80AsmParser.ENTPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public EntPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterEntPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitEntPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntPragmaContext entPragma() {
		EntPragmaContext _localctx = new EntPragmaContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_entPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; Match(ENTPRAG);
			State = 165; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DispPragmaContext : ParserRuleContext {
		public ITerminalNode DISPRAG() { return GetToken(Z80AsmParser.DISPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DispPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dispPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDispPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDispPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDispPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DispPragmaContext dispPragma() {
		DispPragmaContext _localctx = new DispPragmaContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_dispPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; Match(DISPRAG);
			State = 168; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquPragmaContext : ParserRuleContext {
		public ITerminalNode EQUPRAG() { return GetToken(Z80AsmParser.EQUPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public EquPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterEquPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitEquPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquPragmaContext equPragma() {
		EquPragmaContext _localctx = new EquPragmaContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_equPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(EQUPRAG);
			State = 171; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefbPragmaContext : ParserRuleContext {
		public ITerminalNode DBPRAG() { return GetToken(Z80AsmParser.DBPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public DefbPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defbPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefbPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefbPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefbPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefbPragmaContext defbPragma() {
		DefbPragmaContext _localctx = new DefbPragmaContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_defbPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; Match(DBPRAG);
			State = 174; expr();
			State = 179;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 175; Match(T__1);
				State = 176; expr();
				}
				}
				State = 181;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefwPragmaContext : ParserRuleContext {
		public ITerminalNode DWPRAG() { return GetToken(Z80AsmParser.DWPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public DefwPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defwPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefwPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefwPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefwPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefwPragmaContext defwPragma() {
		DefwPragmaContext _localctx = new DefwPragmaContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_defwPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; Match(DWPRAG);
			State = 183; expr();
			State = 188;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 184; Match(T__1);
				State = 185; expr();
				}
				}
				State = 190;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefmPragmaContext : ParserRuleContext {
		public ITerminalNode DMPRAG() { return GetToken(Z80AsmParser.DMPRAG, 0); }
		public ITerminalNode STRING() { return GetToken(Z80AsmParser.STRING, 0); }
		public DefmPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defmPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefmPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefmPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefmPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefmPragmaContext defmPragma() {
		DefmPragmaContext _localctx = new DefmPragmaContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_defmPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(DMPRAG);
			State = 192; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipPragmaContext : ParserRuleContext {
		public ITerminalNode SKIPRAG() { return GetToken(Z80AsmParser.SKIPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SkipPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skipPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterSkipPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitSkipPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkipPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkipPragmaContext skipPragma() {
		SkipPragmaContext _localctx = new SkipPragmaContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_skipPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; Match(SKIPRAG);
			State = 195; expr();
			State = 198;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 196; Match(T__1);
				State = 197; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternPragmaContext : ParserRuleContext {
		public ITerminalNode EXTPRAG() { return GetToken(Z80AsmParser.EXTPRAG, 0); }
		public ExternPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterExternPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitExternPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternPragmaContext externPragma() {
		ExternPragmaContext _localctx = new ExternPragmaContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_externPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(EXTPRAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public TrivialOperationContext trivialOperation() {
			return GetRuleContext<TrivialOperationContext>(0);
		}
		public CompoundOperationContext compoundOperation() {
			return GetRuleContext<CompoundOperationContext>(0);
		}
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_operation);
		try {
			State = 204;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NOP:
			case RLCA:
			case RRCA:
			case RLA:
			case RRA:
			case DAA:
			case CPL:
			case SCF:
			case CCF:
			case HALT:
			case EXX:
			case DI:
			case EI:
			case NEG:
			case RETN:
			case RETI:
			case RLD:
			case RRD:
			case LDI:
			case CPI:
			case INI:
			case OUTI:
			case LDD:
			case CPD:
			case IND:
			case OUTD:
			case LDIR:
			case CPIR:
			case INIR:
			case OTIR:
			case LDDR:
			case CPDR:
			case INDR:
			case OTDR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 202; trivialOperation();
				}
				break;
			case RET:
			case LD:
			case INC:
			case DEC:
			case EX:
			case ADD:
			case ADC:
			case SUB:
			case SBC:
			case AND:
			case XOR:
			case OR:
			case CP:
			case DJNZ:
			case JR:
			case JP:
			case CALL:
			case RST:
			case PUSH:
			case POP:
			case IN:
			case OUT:
			case IM:
			case RLC:
			case RRC:
			case RL:
			case RR:
			case SLA:
			case SRA:
			case SLL:
			case SRL:
			case BIT:
			case RES:
			case SET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203; compoundOperation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrivialOperationContext : ParserRuleContext {
		public ITerminalNode NOP() { return GetToken(Z80AsmParser.NOP, 0); }
		public ITerminalNode RLCA() { return GetToken(Z80AsmParser.RLCA, 0); }
		public ITerminalNode RRCA() { return GetToken(Z80AsmParser.RRCA, 0); }
		public ITerminalNode RLA() { return GetToken(Z80AsmParser.RLA, 0); }
		public ITerminalNode RRA() { return GetToken(Z80AsmParser.RRA, 0); }
		public ITerminalNode DAA() { return GetToken(Z80AsmParser.DAA, 0); }
		public ITerminalNode CPL() { return GetToken(Z80AsmParser.CPL, 0); }
		public ITerminalNode SCF() { return GetToken(Z80AsmParser.SCF, 0); }
		public ITerminalNode CCF() { return GetToken(Z80AsmParser.CCF, 0); }
		public ITerminalNode HALT() { return GetToken(Z80AsmParser.HALT, 0); }
		public ITerminalNode EXX() { return GetToken(Z80AsmParser.EXX, 0); }
		public ITerminalNode DI() { return GetToken(Z80AsmParser.DI, 0); }
		public ITerminalNode EI() { return GetToken(Z80AsmParser.EI, 0); }
		public ITerminalNode NEG() { return GetToken(Z80AsmParser.NEG, 0); }
		public ITerminalNode RETN() { return GetToken(Z80AsmParser.RETN, 0); }
		public ITerminalNode RETI() { return GetToken(Z80AsmParser.RETI, 0); }
		public ITerminalNode RLD() { return GetToken(Z80AsmParser.RLD, 0); }
		public ITerminalNode RRD() { return GetToken(Z80AsmParser.RRD, 0); }
		public ITerminalNode LDI() { return GetToken(Z80AsmParser.LDI, 0); }
		public ITerminalNode CPI() { return GetToken(Z80AsmParser.CPI, 0); }
		public ITerminalNode INI() { return GetToken(Z80AsmParser.INI, 0); }
		public ITerminalNode OUTI() { return GetToken(Z80AsmParser.OUTI, 0); }
		public ITerminalNode LDD() { return GetToken(Z80AsmParser.LDD, 0); }
		public ITerminalNode CPD() { return GetToken(Z80AsmParser.CPD, 0); }
		public ITerminalNode IND() { return GetToken(Z80AsmParser.IND, 0); }
		public ITerminalNode OUTD() { return GetToken(Z80AsmParser.OUTD, 0); }
		public ITerminalNode LDIR() { return GetToken(Z80AsmParser.LDIR, 0); }
		public ITerminalNode CPIR() { return GetToken(Z80AsmParser.CPIR, 0); }
		public ITerminalNode INIR() { return GetToken(Z80AsmParser.INIR, 0); }
		public ITerminalNode OTIR() { return GetToken(Z80AsmParser.OTIR, 0); }
		public ITerminalNode LDDR() { return GetToken(Z80AsmParser.LDDR, 0); }
		public ITerminalNode CPDR() { return GetToken(Z80AsmParser.CPDR, 0); }
		public ITerminalNode INDR() { return GetToken(Z80AsmParser.INDR, 0); }
		public ITerminalNode OTDR() { return GetToken(Z80AsmParser.OTDR, 0); }
		public TrivialOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trivialOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterTrivialOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitTrivialOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrivialOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrivialOperationContext trivialOperation() {
		TrivialOperationContext _localctx = new TrivialOperationContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_trivialOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			_la = _input.La(1);
			if ( !(((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (NOP - 84)) | (1L << (RLCA - 84)) | (1L << (RRCA - 84)) | (1L << (RLA - 84)) | (1L << (RRA - 84)) | (1L << (DAA - 84)) | (1L << (CPL - 84)) | (1L << (SCF - 84)) | (1L << (CCF - 84)) | (1L << (HALT - 84)) | (1L << (EXX - 84)) | (1L << (DI - 84)) | (1L << (EI - 84)) | (1L << (NEG - 84)) | (1L << (RETN - 84)) | (1L << (RETI - 84)) | (1L << (RLD - 84)) | (1L << (RRD - 84)) | (1L << (LDI - 84)) | (1L << (CPI - 84)) | (1L << (INI - 84)) | (1L << (OUTI - 84)) | (1L << (LDD - 84)) | (1L << (CPD - 84)) | (1L << (IND - 84)) | (1L << (OUTD - 84)) | (1L << (LDIR - 84)) | (1L << (CPIR - 84)) | (1L << (INIR - 84)) | (1L << (OTIR - 84)) | (1L << (LDDR - 84)) | (1L << (CPDR - 84)) | (1L << (INDR - 84)) | (1L << (OTDR - 84)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundOperationContext : ParserRuleContext {
		public ITerminalNode LD() { return GetToken(Z80AsmParser.LD, 0); }
		public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		public ITerminalNode INC() { return GetToken(Z80AsmParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(Z80AsmParser.DEC, 0); }
		public ITerminalNode EX() { return GetToken(Z80AsmParser.EX, 0); }
		public ITerminalNode ADD() { return GetToken(Z80AsmParser.ADD, 0); }
		public ITerminalNode ADC() { return GetToken(Z80AsmParser.ADC, 0); }
		public ITerminalNode SUB() { return GetToken(Z80AsmParser.SUB, 0); }
		public ITerminalNode SBC() { return GetToken(Z80AsmParser.SBC, 0); }
		public ITerminalNode AND() { return GetToken(Z80AsmParser.AND, 0); }
		public ITerminalNode XOR() { return GetToken(Z80AsmParser.XOR, 0); }
		public ITerminalNode OR() { return GetToken(Z80AsmParser.OR, 0); }
		public ITerminalNode CP() { return GetToken(Z80AsmParser.CP, 0); }
		public ITerminalNode DJNZ() { return GetToken(Z80AsmParser.DJNZ, 0); }
		public ITerminalNode JR() { return GetToken(Z80AsmParser.JR, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode JP() { return GetToken(Z80AsmParser.JP, 0); }
		public ITerminalNode CALL() { return GetToken(Z80AsmParser.CALL, 0); }
		public ITerminalNode RET() { return GetToken(Z80AsmParser.RET, 0); }
		public ITerminalNode RST() { return GetToken(Z80AsmParser.RST, 0); }
		public ITerminalNode PUSH() { return GetToken(Z80AsmParser.PUSH, 0); }
		public ITerminalNode POP() { return GetToken(Z80AsmParser.POP, 0); }
		public ITerminalNode IN() { return GetToken(Z80AsmParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(Z80AsmParser.OUT, 0); }
		public ITerminalNode IM() { return GetToken(Z80AsmParser.IM, 0); }
		public ITerminalNode RLC() { return GetToken(Z80AsmParser.RLC, 0); }
		public ITerminalNode RRC() { return GetToken(Z80AsmParser.RRC, 0); }
		public ITerminalNode RL() { return GetToken(Z80AsmParser.RL, 0); }
		public ITerminalNode RR() { return GetToken(Z80AsmParser.RR, 0); }
		public ITerminalNode SLA() { return GetToken(Z80AsmParser.SLA, 0); }
		public ITerminalNode SRA() { return GetToken(Z80AsmParser.SRA, 0); }
		public ITerminalNode SLL() { return GetToken(Z80AsmParser.SLL, 0); }
		public ITerminalNode SRL() { return GetToken(Z80AsmParser.SRL, 0); }
		public ITerminalNode BIT() { return GetToken(Z80AsmParser.BIT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RES() { return GetToken(Z80AsmParser.RES, 0); }
		public ITerminalNode SET() { return GetToken(Z80AsmParser.SET, 0); }
		public CompoundOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCompoundOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCompoundOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundOperationContext compoundOperation() {
		CompoundOperationContext _localctx = new CompoundOperationContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_compoundOperation);
		int _la;
		try {
			State = 377;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 208; Match(LD);
				State = 209; operand();
				State = 210; Match(T__1);
				State = 211; operand();
				}
				break;
			case INC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 213; Match(INC);
				State = 214; operand();
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 215; Match(DEC);
				State = 216; operand();
				}
				break;
			case EX:
				EnterOuterAlt(_localctx, 4);
				{
				State = 217; Match(EX);
				State = 218; operand();
				State = 219; Match(T__1);
				State = 220; operand();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 5);
				{
				State = 222; Match(ADD);
				State = 223; operand();
				State = 224; Match(T__1);
				State = 225; operand();
				}
				break;
			case ADC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 227; Match(ADC);
				State = 228; operand();
				State = 229; Match(T__1);
				State = 230; operand();
				}
				break;
			case SUB:
				EnterOuterAlt(_localctx, 7);
				{
				State = 232; Match(SUB);
				State = 233; operand();
				}
				break;
			case SBC:
				EnterOuterAlt(_localctx, 8);
				{
				State = 234; Match(SBC);
				State = 235; operand();
				State = 236; Match(T__1);
				State = 237; operand();
				}
				break;
			case AND:
				EnterOuterAlt(_localctx, 9);
				{
				State = 239; Match(AND);
				State = 240; operand();
				}
				break;
			case XOR:
				EnterOuterAlt(_localctx, 10);
				{
				State = 241; Match(XOR);
				State = 242; operand();
				}
				break;
			case OR:
				EnterOuterAlt(_localctx, 11);
				{
				State = 243; Match(OR);
				State = 244; operand();
				}
				break;
			case CP:
				EnterOuterAlt(_localctx, 12);
				{
				State = 245; Match(CP);
				State = 246; operand();
				}
				break;
			case DJNZ:
				EnterOuterAlt(_localctx, 13);
				{
				State = 247; Match(DJNZ);
				State = 248; operand();
				}
				break;
			case JR:
				EnterOuterAlt(_localctx, 14);
				{
				State = 249; Match(JR);
				State = 253;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
				case 1:
					{
					State = 250; condition();
					State = 251; Match(T__1);
					}
					break;
				}
				State = 255; operand();
				}
				break;
			case JP:
				EnterOuterAlt(_localctx, 15);
				{
				State = 256; Match(JP);
				State = 260;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
				case 1:
					{
					State = 257; condition();
					State = 258; Match(T__1);
					}
					break;
				}
				State = 262; operand();
				}
				break;
			case CALL:
				EnterOuterAlt(_localctx, 16);
				{
				State = 263; Match(CALL);
				State = 267;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
				case 1:
					{
					State = 264; condition();
					State = 265; Match(T__1);
					}
					break;
				}
				State = 269; operand();
				}
				break;
			case RET:
				EnterOuterAlt(_localctx, 17);
				{
				State = 270; Match(RET);
				State = 272;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (T__6 - 7)) | (1L << (T__7 - 7)) | (1L << (T__50 - 7)) | (1L << (T__51 - 7)) | (1L << (T__52 - 7)) | (1L << (T__53 - 7)) | (1L << (T__54 - 7)) | (1L << (T__55 - 7)) | (1L << (T__56 - 7)) | (1L << (T__57 - 7)) | (1L << (T__58 - 7)) | (1L << (T__59 - 7)) | (1L << (T__60 - 7)) | (1L << (T__61 - 7)) | (1L << (T__62 - 7)) | (1L << (T__63 - 7)))) != 0)) {
					{
					State = 271; condition();
					}
				}

				}
				break;
			case RST:
				EnterOuterAlt(_localctx, 18);
				{
				State = 274; Match(RST);
				State = 275; operand();
				}
				break;
			case PUSH:
				EnterOuterAlt(_localctx, 19);
				{
				State = 276; Match(PUSH);
				State = 277; operand();
				}
				break;
			case POP:
				EnterOuterAlt(_localctx, 20);
				{
				State = 278; Match(POP);
				State = 279; operand();
				}
				break;
			case IN:
				EnterOuterAlt(_localctx, 21);
				{
				State = 280; Match(IN);
				State = 284;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
				case 1:
					{
					State = 281; operand();
					State = 282; Match(T__1);
					}
					break;
				}
				State = 286; operand();
				}
				break;
			case OUT:
				EnterOuterAlt(_localctx, 22);
				{
				State = 287; Match(OUT);
				State = 291;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
				case 1:
					{
					State = 288; operand();
					State = 289; Match(T__1);
					}
					break;
				}
				State = 293; operand();
				}
				break;
			case IM:
				EnterOuterAlt(_localctx, 23);
				{
				State = 294; Match(IM);
				State = 295; operand();
				}
				break;
			case RLC:
				EnterOuterAlt(_localctx, 24);
				{
				State = 296; Match(RLC);
				State = 300;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
				case 1:
					{
					State = 297; operand();
					State = 298; Match(T__1);
					}
					break;
				}
				State = 302; operand();
				}
				break;
			case RRC:
				EnterOuterAlt(_localctx, 25);
				{
				State = 303; Match(RRC);
				State = 307;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
				case 1:
					{
					State = 304; operand();
					State = 305; Match(T__1);
					}
					break;
				}
				State = 309; operand();
				}
				break;
			case RL:
				EnterOuterAlt(_localctx, 26);
				{
				State = 310; Match(RL);
				State = 314;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
				case 1:
					{
					State = 311; operand();
					State = 312; Match(T__1);
					}
					break;
				}
				State = 316; operand();
				}
				break;
			case RR:
				EnterOuterAlt(_localctx, 27);
				{
				State = 317; Match(RR);
				State = 321;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
				case 1:
					{
					State = 318; operand();
					State = 319; Match(T__1);
					}
					break;
				}
				State = 323; operand();
				}
				break;
			case SLA:
				EnterOuterAlt(_localctx, 28);
				{
				State = 324; Match(SLA);
				State = 328;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
				case 1:
					{
					State = 325; operand();
					State = 326; Match(T__1);
					}
					break;
				}
				State = 330; operand();
				}
				break;
			case SRA:
				EnterOuterAlt(_localctx, 29);
				{
				State = 331; Match(SRA);
				State = 335;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
				case 1:
					{
					State = 332; operand();
					State = 333; Match(T__1);
					}
					break;
				}
				State = 337; operand();
				}
				break;
			case SLL:
				EnterOuterAlt(_localctx, 30);
				{
				State = 338; Match(SLL);
				State = 342;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
				case 1:
					{
					State = 339; operand();
					State = 340; Match(T__1);
					}
					break;
				}
				State = 344; operand();
				}
				break;
			case SRL:
				EnterOuterAlt(_localctx, 31);
				{
				State = 345; Match(SRL);
				State = 349;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
				case 1:
					{
					State = 346; operand();
					State = 347; Match(T__1);
					}
					break;
				}
				State = 351; operand();
				}
				break;
			case BIT:
				EnterOuterAlt(_localctx, 32);
				{
				State = 352; Match(BIT);
				State = 353; expr();
				State = 354; Match(T__1);
				State = 355; operand();
				}
				break;
			case RES:
				EnterOuterAlt(_localctx, 33);
				{
				State = 357; Match(RES);
				State = 358; expr();
				State = 359; Match(T__1);
				State = 363;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
				case 1:
					{
					State = 360; operand();
					State = 361; Match(T__1);
					}
					break;
				}
				State = 365; operand();
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 34);
				{
				State = 367; Match(SET);
				State = 368; expr();
				State = 369; Match(T__1);
				State = 373;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
				case 1:
					{
					State = 370; operand();
					State = 371; Match(T__1);
					}
					break;
				}
				State = 375; operand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		public Reg8Context reg8() {
			return GetRuleContext<Reg8Context>(0);
		}
		public Reg8IdxContext reg8Idx() {
			return GetRuleContext<Reg8IdxContext>(0);
		}
		public Reg8SpecContext reg8Spec() {
			return GetRuleContext<Reg8SpecContext>(0);
		}
		public Reg16Context reg16() {
			return GetRuleContext<Reg16Context>(0);
		}
		public Reg16IdxContext reg16Idx() {
			return GetRuleContext<Reg16IdxContext>(0);
		}
		public Reg16SpecContext reg16Spec() {
			return GetRuleContext<Reg16SpecContext>(0);
		}
		public RegIndirectContext regIndirect() {
			return GetRuleContext<RegIndirectContext>(0);
		}
		public CPortContext cPort() {
			return GetRuleContext<CPortContext>(0);
		}
		public MemIndirectContext memIndirect() {
			return GetRuleContext<MemIndirectContext>(0);
		}
		public IndexedAddrContext indexedAddr() {
			return GetRuleContext<IndexedAddrContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_operand);
		try {
			State = 390;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 379; reg8();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 380; reg8Idx();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 381; reg8Spec();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 382; reg16();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 383; reg16Idx();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 384; reg16Spec();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 385; regIndirect();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 386; cPort();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 387; memIndirect();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 388; indexedAddr();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 389; expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8Context : ParserRuleContext {
		public Reg8Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg8(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg8(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8Context reg8() {
		Reg8Context _localctx = new Reg8Context(_ctx, State);
		EnterRule(_localctx, 40, RULE_reg8);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8IdxContext : ParserRuleContext {
		public Reg8IdxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8Idx; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg8Idx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg8Idx(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8Idx(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8IdxContext reg8Idx() {
		Reg8IdxContext _localctx = new Reg8IdxContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_reg8Idx);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8SpecContext : ParserRuleContext {
		public Reg8SpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8Spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg8Spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg8Spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8Spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8SpecContext reg8Spec() {
		Reg8SpecContext _localctx = new Reg8SpecContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_reg8Spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16Context : ParserRuleContext {
		public Reg16Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg16(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg16(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16Context reg16() {
		Reg16Context _localctx = new Reg16Context(_ctx, State);
		EnterRule(_localctx, 46, RULE_reg16);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16IdxContext : ParserRuleContext {
		public Reg16IdxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16Idx; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg16Idx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg16Idx(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16Idx(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16IdxContext reg16Idx() {
		Reg16IdxContext _localctx = new Reg16IdxContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_reg16Idx);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16SpecContext : ParserRuleContext {
		public Reg16SpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16Spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg16Spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg16Spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16Spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16SpecContext reg16Spec() {
		Reg16SpecContext _localctx = new Reg16SpecContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_reg16Spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegIndirectContext : ParserRuleContext {
		public Reg16Context reg16() {
			return GetRuleContext<Reg16Context>(0);
		}
		public RegIndirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regIndirect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRegIndirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRegIndirect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegIndirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegIndirectContext regIndirect() {
		RegIndirectContext _localctx = new RegIndirectContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_regIndirect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404; Match(T__44);
			{
			State = 405; reg16();
			}
			State = 406; Match(T__45);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CPortContext : ParserRuleContext {
		public CPortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cPort; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCPort(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCPort(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCPort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CPortContext cPort() {
		CPortContext _localctx = new CPortContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_cPort);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408; Match(T__44);
			State = 409;
			_la = _input.La(1);
			if ( !(_la==T__6 || _la==T__7) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 410; Match(T__45);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemIndirectContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public MemIndirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memIndirect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMemIndirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMemIndirect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemIndirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemIndirectContext memIndirect() {
		MemIndirectContext _localctx = new MemIndirectContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_memIndirect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412; Match(T__44);
			State = 413; expr();
			State = 414; Match(T__45);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexedAddrContext : ParserRuleContext {
		public Reg16IdxContext reg16Idx() {
			return GetRuleContext<Reg16IdxContext>(0);
		}
		public LiteralExprContext literalExpr() {
			return GetRuleContext<LiteralExprContext>(0);
		}
		public SymbolExprContext symbolExpr() {
			return GetRuleContext<SymbolExprContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IndexedAddrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexedAddr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIndexedAddr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIndexedAddr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexedAddr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexedAddrContext indexedAddr() {
		IndexedAddrContext _localctx = new IndexedAddrContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_indexedAddr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; Match(T__44);
			State = 417; reg16Idx();
			State = 427;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__46 || _la==T__47) {
				{
				State = 418;
				_la = _input.La(1);
				if ( !(_la==T__46 || _la==T__47) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 425;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case T__79:
				case DECNUM:
				case HEXNUM:
				case CHAR:
					{
					State = 419; literalExpr();
					}
					break;
				case IDENTIFIER:
					{
					State = 420; symbolExpr();
					}
					break;
				case T__48:
					{
					State = 421; Match(T__48);
					State = 422; expr();
					State = 423; Match(T__49);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 429; Match(T__45);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			_la = _input.La(1);
			if ( !(((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (T__6 - 7)) | (1L << (T__7 - 7)) | (1L << (T__50 - 7)) | (1L << (T__51 - 7)) | (1L << (T__52 - 7)) | (1L << (T__53 - 7)) | (1L << (T__54 - 7)) | (1L << (T__55 - 7)) | (1L << (T__56 - 7)) | (1L << (T__57 - 7)) | (1L << (T__58 - 7)) | (1L << (T__59 - 7)) | (1L << (T__60 - 7)) | (1L << (T__61 - 7)) | (1L << (T__62 - 7)) | (1L << (T__63 - 7)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public OrExprContext orExpr() {
			return GetRuleContext<OrExprContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433; orExpr();
			State = 439;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__64) {
				{
				State = 434; Match(T__64);
				State = 435; expr();
				State = 436; Match(T__0);
				State = 437; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExprContext : ParserRuleContext {
		public XorExprContext[] xorExpr() {
			return GetRuleContexts<XorExprContext>();
		}
		public XorExprContext xorExpr(int i) {
			return GetRuleContext<XorExprContext>(i);
		}
		public OrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExprContext orExpr() {
		OrExprContext _localctx = new OrExprContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_orExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441; xorExpr();
			State = 446;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__65) {
				{
				{
				State = 442; Match(T__65);
				State = 443; xorExpr();
				}
				}
				State = 448;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XorExprContext : ParserRuleContext {
		public AndExprContext[] andExpr() {
			return GetRuleContexts<AndExprContext>();
		}
		public AndExprContext andExpr(int i) {
			return GetRuleContext<AndExprContext>(i);
		}
		public XorExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xorExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterXorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitXorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XorExprContext xorExpr() {
		XorExprContext _localctx = new XorExprContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_xorExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449; andExpr();
			State = 454;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__66) {
				{
				{
				State = 450; Match(T__66);
				State = 451; andExpr();
				}
				}
				State = 456;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExprContext : ParserRuleContext {
		public EquExprContext[] equExpr() {
			return GetRuleContexts<EquExprContext>();
		}
		public EquExprContext equExpr(int i) {
			return GetRuleContext<EquExprContext>(i);
		}
		public AndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExprContext andExpr() {
		AndExprContext _localctx = new AndExprContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_andExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457; equExpr();
			State = 462;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__67) {
				{
				{
				State = 458; Match(T__67);
				State = 459; equExpr();
				}
				}
				State = 464;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquExprContext : ParserRuleContext {
		public RelExprContext[] relExpr() {
			return GetRuleContexts<RelExprContext>();
		}
		public RelExprContext relExpr(int i) {
			return GetRuleContext<RelExprContext>(i);
		}
		public EquExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterEquExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitEquExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquExprContext equExpr() {
		EquExprContext _localctx = new EquExprContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_equExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465; relExpr();
			State = 470;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__68 || _la==T__69) {
				{
				{
				State = 466;
				_la = _input.La(1);
				if ( !(_la==T__68 || _la==T__69) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 467; relExpr();
				}
				}
				State = 472;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelExprContext : ParserRuleContext {
		public ShiftExprContext[] shiftExpr() {
			return GetRuleContexts<ShiftExprContext>();
		}
		public ShiftExprContext shiftExpr(int i) {
			return GetRuleContext<ShiftExprContext>(i);
		}
		public RelExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRelExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRelExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelExprContext relExpr() {
		RelExprContext _localctx = new RelExprContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_relExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473; shiftExpr();
			State = 478;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (T__70 - 71)) | (1L << (T__71 - 71)) | (1L << (T__72 - 71)) | (1L << (T__73 - 71)))) != 0)) {
				{
				{
				State = 474;
				_la = _input.La(1);
				if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (T__70 - 71)) | (1L << (T__71 - 71)) | (1L << (T__72 - 71)) | (1L << (T__73 - 71)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 475; shiftExpr();
				}
				}
				State = 480;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExprContext : ParserRuleContext {
		public AddExprContext[] addExpr() {
			return GetRuleContexts<AddExprContext>();
		}
		public AddExprContext addExpr(int i) {
			return GetRuleContext<AddExprContext>(i);
		}
		public ShiftExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterShiftExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitShiftExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExprContext shiftExpr() {
		ShiftExprContext _localctx = new ShiftExprContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_shiftExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481; addExpr();
			State = 486;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__74 || _la==T__75) {
				{
				{
				State = 482;
				_la = _input.La(1);
				if ( !(_la==T__74 || _la==T__75) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 483; addExpr();
				}
				}
				State = 488;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExprContext : ParserRuleContext {
		public MultExprContext[] multExpr() {
			return GetRuleContexts<MultExprContext>();
		}
		public MultExprContext multExpr(int i) {
			return GetRuleContext<MultExprContext>(i);
		}
		public AddExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterAddExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitAddExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExprContext addExpr() {
		AddExprContext _localctx = new AddExprContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_addExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489; multExpr();
			State = 494;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__46 || _la==T__47) {
				{
				{
				State = 490;
				_la = _input.La(1);
				if ( !(_la==T__46 || _la==T__47) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 491; multExpr();
				}
				}
				State = 496;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultExprContext : ParserRuleContext {
		public UnaryExprContext[] unaryExpr() {
			return GetRuleContexts<UnaryExprContext>();
		}
		public UnaryExprContext unaryExpr(int i) {
			return GetRuleContext<UnaryExprContext>(i);
		}
		public MultExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMultExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMultExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultExprContext multExpr() {
		MultExprContext _localctx = new MultExprContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_multExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497; unaryExpr();
			State = 502;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (T__76 - 77)) | (1L << (T__77 - 77)) | (1L << (T__78 - 77)))) != 0)) {
				{
				{
				State = 498;
				_la = _input.La(1);
				if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (T__76 - 77)) | (1L << (T__77 - 77)) | (1L << (T__78 - 77)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 499; unaryExpr();
				}
				}
				State = 504;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExprContext : ParserRuleContext {
		public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LiteralExprContext literalExpr() {
			return GetRuleContext<LiteralExprContext>(0);
		}
		public SymbolExprContext symbolExpr() {
			return GetRuleContext<SymbolExprContext>(0);
		}
		public UnaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprContext unaryExpr() {
		UnaryExprContext _localctx = new UnaryExprContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_unaryExpr);
		try {
			State = 515;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__46:
				EnterOuterAlt(_localctx, 1);
				{
				State = 505; Match(T__46);
				State = 506; unaryExpr();
				}
				break;
			case T__47:
				EnterOuterAlt(_localctx, 2);
				{
				State = 507; Match(T__47);
				State = 508; unaryExpr();
				}
				break;
			case T__48:
				EnterOuterAlt(_localctx, 3);
				{
				State = 509; Match(T__48);
				State = 510; expr();
				State = 511; Match(T__49);
				}
				break;
			case T__79:
			case DECNUM:
			case HEXNUM:
			case CHAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 513; literalExpr();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 514; symbolExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralExprContext : ParserRuleContext {
		public ITerminalNode DECNUM() { return GetToken(Z80AsmParser.DECNUM, 0); }
		public ITerminalNode HEXNUM() { return GetToken(Z80AsmParser.HEXNUM, 0); }
		public ITerminalNode CHAR() { return GetToken(Z80AsmParser.CHAR, 0); }
		public LiteralExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralExprContext literalExpr() {
		LiteralExprContext _localctx = new LiteralExprContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_literalExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			_la = _input.La(1);
			if ( !(_la==T__79 || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (DECNUM - 169)) | (1L << (HEXNUM - 169)) | (1L << (CHAR - 169)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolExprContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public SymbolExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterSymbolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitSymbolExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolExprContext symbolExpr() {
		SymbolExprContext _localctx = new SymbolExprContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_symbolExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xB4\x20C\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x3\x2\x3\x2\a\x2[\n\x2\f\x2\xE\x2^\v\x2\x3\x2\x3\x2\x6"+
		"\x2\x62\n\x2\r\x2\xE\x2\x63\x3\x2\a\x2g\n\x2\f\x2\xE\x2j\v\x2\x3\x2\a"+
		"\x2m\n\x2\f\x2\xE\x2p\v\x2\x3\x2\x3\x2\x5\x2t\n\x2\x3\x3\x5\x3w\n\x3\x3"+
		"\x3\x3\x3\x5\x3{\n\x3\x3\x3\x5\x3~\n\x3\x3\x3\x3\x3\x5\x3\x82\n\x3\x3"+
		"\x3\x3\x3\x5\x3\x86\n\x3\x3\x4\x3\x4\x5\x4\x8A\n\x4\x3\x5\x3\x5\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x97\n\x6\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x5\a\x9F\n\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\n"+
		"\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\a\r\xB4\n"+
		"\r\f\r\xE\r\xB7\v\r\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\xBD\n\xE\f\xE\xE\xE\xC0"+
		"\v\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\xC9\n\x10\x3"+
		"\x11\x3\x11\x3\x12\x3\x12\x5\x12\xCF\n\x12\x3\x13\x3\x13\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x5\x14\x100\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\x5\x14\x107\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x10E"+
		"\n\x14\x3\x14\x3\x14\x3\x14\x5\x14\x113\n\x14\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x11F\n\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x126\n\x14\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x5\x14\x12F\n\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x5\x14\x136\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x13D"+
		"\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x144\n\x14\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x5\x14\x14B\n\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x5\x14\x152\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x159"+
		"\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x160\n\x14\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\x5\x14\x16E\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x5\x14\x178\n\x14\x3\x14\x3\x14\x5\x14\x17C\n\x14\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15"+
		"\x189\n\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3"+
		"\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x1AC\n\x1F\x5\x1F\x1AE\n\x1F\x3"+
		"\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3!\x3!\x3!\x3!\x5!\x1BA\n!\x3\"\x3\"\x3\""+
		"\a\"\x1BF\n\"\f\"\xE\"\x1C2\v\"\x3#\x3#\x3#\a#\x1C7\n#\f#\xE#\x1CA\v#"+
		"\x3$\x3$\x3$\a$\x1CF\n$\f$\xE$\x1D2\v$\x3%\x3%\x3%\a%\x1D7\n%\f%\xE%\x1DA"+
		"\v%\x3&\x3&\x3&\a&\x1DF\n&\f&\xE&\x1E2\v&\x3\'\x3\'\x3\'\a\'\x1E7\n\'"+
		"\f\'\xE\'\x1EA\v\'\x3(\x3(\x3(\a(\x1EF\n(\f(\xE(\x1F2\v(\x3)\x3)\x3)\a"+
		")\x1F7\n)\f)\xE)\x1FA\v)\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x5*\x206"+
		"\n*\x3+\x3+\x3,\x3,\x3,\x2\x2\x2-\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE"+
		"\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$"+
		"\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2"+
		"@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2\x2\x13\x4\x2"+
		"\x9A\x9B\x9E\x9F\x3\x2\xB0\xB1\x4\x2V_\x61x\x3\x2\x5\x12\x3\x2\x13\x1A"+
		"\x3\x2\x1B\x1E\x3\x2\x1F&\x3\x2\'*\x3\x2+.\x3\x2\t\n\x3\x2\x31\x32\x4"+
		"\x2\t\n\x35\x42\x3\x2GH\x3\x2IL\x3\x2MN\x3\x2OQ\x5\x2RR\xAB\xAC\xAF\xAF"+
		"\x247\x2s\x3\x2\x2\x2\x4\x85\x3\x2\x2\x2\x6\x87\x3\x2\x2\x2\b\x8B\x3\x2"+
		"\x2\x2\n\x96\x3\x2\x2\x2\f\x9E\x3\x2\x2\x2\xE\xA0\x3\x2\x2\x2\x10\xA3"+
		"\x3\x2\x2\x2\x12\xA6\x3\x2\x2\x2\x14\xA9\x3\x2\x2\x2\x16\xAC\x3\x2\x2"+
		"\x2\x18\xAF\x3\x2\x2\x2\x1A\xB8\x3\x2\x2\x2\x1C\xC1\x3\x2\x2\x2\x1E\xC4"+
		"\x3\x2\x2\x2 \xCA\x3\x2\x2\x2\"\xCE\x3\x2\x2\x2$\xD0\x3\x2\x2\x2&\x17B"+
		"\x3\x2\x2\x2(\x188\x3\x2\x2\x2*\x18A\x3\x2\x2\x2,\x18C\x3\x2\x2\x2.\x18E"+
		"\x3\x2\x2\x2\x30\x190\x3\x2\x2\x2\x32\x192\x3\x2\x2\x2\x34\x194\x3\x2"+
		"\x2\x2\x36\x196\x3\x2\x2\x2\x38\x19A\x3\x2\x2\x2:\x19E\x3\x2\x2\x2<\x1A2"+
		"\x3\x2\x2\x2>\x1B1\x3\x2\x2\x2@\x1B3\x3\x2\x2\x2\x42\x1BB\x3\x2\x2\x2"+
		"\x44\x1C3\x3\x2\x2\x2\x46\x1CB\x3\x2\x2\x2H\x1D3\x3\x2\x2\x2J\x1DB\x3"+
		"\x2\x2\x2L\x1E3\x3\x2\x2\x2N\x1EB\x3\x2\x2\x2P\x1F3\x3\x2\x2\x2R\x205"+
		"\x3\x2\x2\x2T\x207\x3\x2\x2\x2V\x209\x3\x2\x2\x2Xt\a\x2\x2\x3Y[\aU\x2"+
		"\x2ZY\x3\x2\x2\x2[^\x3\x2\x2\x2\\Z\x3\x2\x2\x2\\]\x3\x2\x2\x2]_\x3\x2"+
		"\x2\x2^\\\x3\x2\x2\x2_h\x5\x4\x3\x2`\x62\aU\x2\x2\x61`\x3\x2\x2\x2\x62"+
		"\x63\x3\x2\x2\x2\x63\x61\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64\x65\x3\x2"+
		"\x2\x2\x65g\x5\x4\x3\x2\x66\x61\x3\x2\x2\x2gj\x3\x2\x2\x2h\x66\x3\x2\x2"+
		"\x2hi\x3\x2\x2\x2in\x3\x2\x2\x2jh\x3\x2\x2\x2km\aU\x2\x2lk\x3\x2\x2\x2"+
		"mp\x3\x2\x2\x2nl\x3\x2\x2\x2no\x3\x2\x2\x2oq\x3\x2\x2\x2pn\x3\x2\x2\x2"+
		"qr\a\x2\x2\x3rt\x3\x2\x2\x2sX\x3\x2\x2\x2s\\\x3\x2\x2\x2t\x3\x3\x2\x2"+
		"\x2uw\x5\x6\x4\x2vu\x3\x2\x2\x2vw\x3\x2\x2\x2wz\x3\x2\x2\x2x{\x5\n\x6"+
		"\x2y{\x5\"\x12\x2zx\x3\x2\x2\x2zy\x3\x2\x2\x2{}\x3\x2\x2\x2|~\x5\b\x5"+
		"\x2}|\x3\x2\x2\x2}~\x3\x2\x2\x2~\x86\x3\x2\x2\x2\x7F\x81\x5\f\a\x2\x80"+
		"\x82\x5\b\x5\x2\x81\x80\x3\x2\x2\x2\x81\x82\x3\x2\x2\x2\x82\x86\x3\x2"+
		"\x2\x2\x83\x86\x5\b\x5\x2\x84\x86\x5\xE\b\x2\x85v\x3\x2\x2\x2\x85\x7F"+
		"\x3\x2\x2\x2\x85\x83\x3\x2\x2\x2\x85\x84\x3\x2\x2\x2\x86\x5\x3\x2\x2\x2"+
		"\x87\x89\a\xB2\x2\x2\x88\x8A\a\x3\x2\x2\x89\x88\x3\x2\x2\x2\x89\x8A\x3"+
		"\x2\x2\x2\x8A\a\x3\x2\x2\x2\x8B\x8C\aS\x2\x2\x8C\t\x3\x2\x2\x2\x8D\x97"+
		"\x5\x10\t\x2\x8E\x97\x5\x12\n\x2\x8F\x97\x5\x14\v\x2\x90\x97\x5\x16\f"+
		"\x2\x91\x97\x5\x18\r\x2\x92\x97\x5\x1A\xE\x2\x93\x97\x5\x1C\xF\x2\x94"+
		"\x97\x5\x1E\x10\x2\x95\x97\x5 \x11\x2\x96\x8D\x3\x2\x2\x2\x96\x8E\x3\x2"+
		"\x2\x2\x96\x8F\x3\x2\x2\x2\x96\x90\x3\x2\x2\x2\x96\x91\x3\x2\x2\x2\x96"+
		"\x92\x3\x2\x2\x2\x96\x93\x3\x2\x2\x2\x96\x94\x3\x2\x2\x2\x96\x95\x3\x2"+
		"\x2\x2\x97\v\x3\x2\x2\x2\x98\x99\t\x2\x2\x2\x99\x9F\a\xB2\x2\x2\x9A\x9F"+
		"\a\x9C\x2\x2\x9B\x9F\a\x9D\x2\x2\x9C\x9D\a\xA1\x2\x2\x9D\x9F\x5@!\x2\x9E"+
		"\x98\x3\x2\x2\x2\x9E\x9A\x3\x2\x2\x2\x9E\x9B\x3\x2\x2\x2\x9E\x9C\x3\x2"+
		"\x2\x2\x9F\r\x3\x2\x2\x2\xA0\xA1\a\xA0\x2\x2\xA1\xA2\t\x3\x2\x2\xA2\xF"+
		"\x3\x2\x2\x2\xA3\xA4\a\xA2\x2\x2\xA4\xA5\x5@!\x2\xA5\x11\x3\x2\x2\x2\xA6"+
		"\xA7\a\xA3\x2\x2\xA7\xA8\x5@!\x2\xA8\x13\x3\x2\x2\x2\xA9\xAA\a\xA5\x2"+
		"\x2\xAA\xAB\x5@!\x2\xAB\x15\x3\x2\x2\x2\xAC\xAD\a\xA4\x2\x2\xAD\xAE\x5"+
		"@!\x2\xAE\x17\x3\x2\x2\x2\xAF\xB0\a\xA6\x2\x2\xB0\xB5\x5@!\x2\xB1\xB2"+
		"\a\x4\x2\x2\xB2\xB4\x5@!\x2\xB3\xB1\x3\x2\x2\x2\xB4\xB7\x3\x2\x2\x2\xB5"+
		"\xB3\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\x19\x3\x2\x2\x2\xB7\xB5\x3\x2"+
		"\x2\x2\xB8\xB9\a\xA7\x2\x2\xB9\xBE\x5@!\x2\xBA\xBB\a\x4\x2\x2\xBB\xBD"+
		"\x5@!\x2\xBC\xBA\x3\x2\x2\x2\xBD\xC0\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBE"+
		"\xBF\x3\x2\x2\x2\xBF\x1B\x3\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC1\xC2\a\xA8"+
		"\x2\x2\xC2\xC3\a\xB0\x2\x2\xC3\x1D\x3\x2\x2\x2\xC4\xC5\a\xA9\x2\x2\xC5"+
		"\xC8\x5@!\x2\xC6\xC7\a\x4\x2\x2\xC7\xC9\x5@!\x2\xC8\xC6\x3\x2\x2\x2\xC8"+
		"\xC9\x3\x2\x2\x2\xC9\x1F\x3\x2\x2\x2\xCA\xCB\a\xAA\x2\x2\xCB!\x3\x2\x2"+
		"\x2\xCC\xCF\x5$\x13\x2\xCD\xCF\x5&\x14\x2\xCE\xCC\x3\x2\x2\x2\xCE\xCD"+
		"\x3\x2\x2\x2\xCF#\x3\x2\x2\x2\xD0\xD1\t\x4\x2\x2\xD1%\x3\x2\x2\x2\xD2"+
		"\xD3\ay\x2\x2\xD3\xD4\x5(\x15\x2\xD4\xD5\a\x4\x2\x2\xD5\xD6\x5(\x15\x2"+
		"\xD6\x17C\x3\x2\x2\x2\xD7\xD8\az\x2\x2\xD8\x17C\x5(\x15\x2\xD9\xDA\a{"+
		"\x2\x2\xDA\x17C\x5(\x15\x2\xDB\xDC\a|\x2\x2\xDC\xDD\x5(\x15\x2\xDD\xDE"+
		"\a\x4\x2\x2\xDE\xDF\x5(\x15\x2\xDF\x17C\x3\x2\x2\x2\xE0\xE1\a}\x2\x2\xE1"+
		"\xE2\x5(\x15\x2\xE2\xE3\a\x4\x2\x2\xE3\xE4\x5(\x15\x2\xE4\x17C\x3\x2\x2"+
		"\x2\xE5\xE6\a~\x2\x2\xE6\xE7\x5(\x15\x2\xE7\xE8\a\x4\x2\x2\xE8\xE9\x5"+
		"(\x15\x2\xE9\x17C\x3\x2\x2\x2\xEA\xEB\a\x7F\x2\x2\xEB\x17C\x5(\x15\x2"+
		"\xEC\xED\a\x80\x2\x2\xED\xEE\x5(\x15\x2\xEE\xEF\a\x4\x2\x2\xEF\xF0\x5"+
		"(\x15\x2\xF0\x17C\x3\x2\x2\x2\xF1\xF2\a\x81\x2\x2\xF2\x17C\x5(\x15\x2"+
		"\xF3\xF4\a\x82\x2\x2\xF4\x17C\x5(\x15\x2\xF5\xF6\a\x83\x2\x2\xF6\x17C"+
		"\x5(\x15\x2\xF7\xF8\a\x84\x2\x2\xF8\x17C\x5(\x15\x2\xF9\xFA\a\x85\x2\x2"+
		"\xFA\x17C\x5(\x15\x2\xFB\xFF\a\x86\x2\x2\xFC\xFD\x5> \x2\xFD\xFE\a\x4"+
		"\x2\x2\xFE\x100\x3\x2\x2\x2\xFF\xFC\x3\x2\x2\x2\xFF\x100\x3\x2\x2\x2\x100"+
		"\x101\x3\x2\x2\x2\x101\x17C\x5(\x15\x2\x102\x106\a\x87\x2\x2\x103\x104"+
		"\x5> \x2\x104\x105\a\x4\x2\x2\x105\x107\x3\x2\x2\x2\x106\x103\x3\x2\x2"+
		"\x2\x106\x107\x3\x2\x2\x2\x107\x108\x3\x2\x2\x2\x108\x17C\x5(\x15\x2\x109"+
		"\x10D\a\x88\x2\x2\x10A\x10B\x5> \x2\x10B\x10C\a\x4\x2\x2\x10C\x10E\x3"+
		"\x2\x2\x2\x10D\x10A\x3\x2\x2\x2\x10D\x10E\x3\x2\x2\x2\x10E\x10F\x3\x2"+
		"\x2\x2\x10F\x17C\x5(\x15\x2\x110\x112\a`\x2\x2\x111\x113\x5> \x2\x112"+
		"\x111\x3\x2\x2\x2\x112\x113\x3\x2\x2\x2\x113\x17C\x3\x2\x2\x2\x114\x115"+
		"\a\x89\x2\x2\x115\x17C\x5(\x15\x2\x116\x117\a\x8A\x2\x2\x117\x17C\x5("+
		"\x15\x2\x118\x119\a\x8B\x2\x2\x119\x17C\x5(\x15\x2\x11A\x11E\a\x8C\x2"+
		"\x2\x11B\x11C\x5(\x15\x2\x11C\x11D\a\x4\x2\x2\x11D\x11F\x3\x2\x2\x2\x11E"+
		"\x11B\x3\x2\x2\x2\x11E\x11F\x3\x2\x2\x2\x11F\x120\x3\x2\x2\x2\x120\x17C"+
		"\x5(\x15\x2\x121\x125\a\x8D\x2\x2\x122\x123\x5(\x15\x2\x123\x124\a\x4"+
		"\x2\x2\x124\x126\x3\x2\x2\x2\x125\x122\x3\x2\x2\x2\x125\x126\x3\x2\x2"+
		"\x2\x126\x127\x3\x2\x2\x2\x127\x17C\x5(\x15\x2\x128\x129\a\x8E\x2\x2\x129"+
		"\x17C\x5(\x15\x2\x12A\x12E\a\x8F\x2\x2\x12B\x12C\x5(\x15\x2\x12C\x12D"+
		"\a\x4\x2\x2\x12D\x12F\x3\x2\x2\x2\x12E\x12B\x3\x2\x2\x2\x12E\x12F\x3\x2"+
		"\x2\x2\x12F\x130\x3\x2\x2\x2\x130\x17C\x5(\x15\x2\x131\x135\a\x90\x2\x2"+
		"\x132\x133\x5(\x15\x2\x133\x134\a\x4\x2\x2\x134\x136\x3\x2\x2\x2\x135"+
		"\x132\x3\x2\x2\x2\x135\x136\x3\x2\x2\x2\x136\x137\x3\x2\x2\x2\x137\x17C"+
		"\x5(\x15\x2\x138\x13C\a\x91\x2\x2\x139\x13A\x5(\x15\x2\x13A\x13B\a\x4"+
		"\x2\x2\x13B\x13D\x3\x2\x2\x2\x13C\x139\x3\x2\x2\x2\x13C\x13D\x3\x2\x2"+
		"\x2\x13D\x13E\x3\x2\x2\x2\x13E\x17C\x5(\x15\x2\x13F\x143\a\x92\x2\x2\x140"+
		"\x141\x5(\x15\x2\x141\x142\a\x4\x2\x2\x142\x144\x3\x2\x2\x2\x143\x140"+
		"\x3\x2\x2\x2\x143\x144\x3\x2\x2\x2\x144\x145\x3\x2\x2\x2\x145\x17C\x5"+
		"(\x15\x2\x146\x14A\a\x93\x2\x2\x147\x148\x5(\x15\x2\x148\x149\a\x4\x2"+
		"\x2\x149\x14B\x3\x2\x2\x2\x14A\x147\x3\x2\x2\x2\x14A\x14B\x3\x2\x2\x2"+
		"\x14B\x14C\x3\x2\x2\x2\x14C\x17C\x5(\x15\x2\x14D\x151\a\x94\x2\x2\x14E"+
		"\x14F\x5(\x15\x2\x14F\x150\a\x4\x2\x2\x150\x152\x3\x2\x2\x2\x151\x14E"+
		"\x3\x2\x2\x2\x151\x152\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153\x17C\x5"+
		"(\x15\x2\x154\x158\a\x95\x2\x2\x155\x156\x5(\x15\x2\x156\x157\a\x4\x2"+
		"\x2\x157\x159\x3\x2\x2\x2\x158\x155\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2"+
		"\x159\x15A\x3\x2\x2\x2\x15A\x17C\x5(\x15\x2\x15B\x15F\a\x96\x2\x2\x15C"+
		"\x15D\x5(\x15\x2\x15D\x15E\a\x4\x2\x2\x15E\x160\x3\x2\x2\x2\x15F\x15C"+
		"\x3\x2\x2\x2\x15F\x160\x3\x2\x2\x2\x160\x161\x3\x2\x2\x2\x161\x17C\x5"+
		"(\x15\x2\x162\x163\a\x97\x2\x2\x163\x164\x5@!\x2\x164\x165\a\x4\x2\x2"+
		"\x165\x166\x5(\x15\x2\x166\x17C\x3\x2\x2\x2\x167\x168\a\x98\x2\x2\x168"+
		"\x169\x5@!\x2\x169\x16D\a\x4\x2\x2\x16A\x16B\x5(\x15\x2\x16B\x16C\a\x4"+
		"\x2\x2\x16C\x16E\x3\x2\x2\x2\x16D\x16A\x3\x2\x2\x2\x16D\x16E\x3\x2\x2"+
		"\x2\x16E\x16F\x3\x2\x2\x2\x16F\x170\x5(\x15\x2\x170\x17C\x3\x2\x2\x2\x171"+
		"\x172\a\x99\x2\x2\x172\x173\x5@!\x2\x173\x177\a\x4\x2\x2\x174\x175\x5"+
		"(\x15\x2\x175\x176\a\x4\x2\x2\x176\x178\x3\x2\x2\x2\x177\x174\x3\x2\x2"+
		"\x2\x177\x178\x3\x2\x2\x2\x178\x179\x3\x2\x2\x2\x179\x17A\x5(\x15\x2\x17A"+
		"\x17C\x3\x2\x2\x2\x17B\xD2\x3\x2\x2\x2\x17B\xD7\x3\x2\x2\x2\x17B\xD9\x3"+
		"\x2\x2\x2\x17B\xDB\x3\x2\x2\x2\x17B\xE0\x3\x2\x2\x2\x17B\xE5\x3\x2\x2"+
		"\x2\x17B\xEA\x3\x2\x2\x2\x17B\xEC\x3\x2\x2\x2\x17B\xF1\x3\x2\x2\x2\x17B"+
		"\xF3\x3\x2\x2\x2\x17B\xF5\x3\x2\x2\x2\x17B\xF7\x3\x2\x2\x2\x17B\xF9\x3"+
		"\x2\x2\x2\x17B\xFB\x3\x2\x2\x2\x17B\x102\x3\x2\x2\x2\x17B\x109\x3\x2\x2"+
		"\x2\x17B\x110\x3\x2\x2\x2\x17B\x114\x3\x2\x2\x2\x17B\x116\x3\x2\x2\x2"+
		"\x17B\x118\x3\x2\x2\x2\x17B\x11A\x3\x2\x2\x2\x17B\x121\x3\x2\x2\x2\x17B"+
		"\x128\x3\x2\x2\x2\x17B\x12A\x3\x2\x2\x2\x17B\x131\x3\x2\x2\x2\x17B\x138"+
		"\x3\x2\x2\x2\x17B\x13F\x3\x2\x2\x2\x17B\x146\x3\x2\x2\x2\x17B\x14D\x3"+
		"\x2\x2\x2\x17B\x154\x3\x2\x2\x2\x17B\x15B\x3\x2\x2\x2\x17B\x162\x3\x2"+
		"\x2\x2\x17B\x167\x3\x2\x2\x2\x17B\x171\x3\x2\x2\x2\x17C\'\x3\x2\x2\x2"+
		"\x17D\x189\x5*\x16\x2\x17E\x189\x5,\x17\x2\x17F\x189\x5.\x18\x2\x180\x189"+
		"\x5\x30\x19\x2\x181\x189\x5\x32\x1A\x2\x182\x189\x5\x34\x1B\x2\x183\x189"+
		"\x5\x36\x1C\x2\x184\x189\x5\x38\x1D\x2\x185\x189\x5:\x1E\x2\x186\x189"+
		"\x5<\x1F\x2\x187\x189\x5@!\x2\x188\x17D\x3\x2\x2\x2\x188\x17E\x3\x2\x2"+
		"\x2\x188\x17F\x3\x2\x2\x2\x188\x180\x3\x2\x2\x2\x188\x181\x3\x2\x2\x2"+
		"\x188\x182\x3\x2\x2\x2\x188\x183\x3\x2\x2\x2\x188\x184\x3\x2\x2\x2\x188"+
		"\x185\x3\x2\x2\x2\x188\x186\x3\x2\x2\x2\x188\x187\x3\x2\x2\x2\x189)\x3"+
		"\x2\x2\x2\x18A\x18B\t\x5\x2\x2\x18B+\x3\x2\x2\x2\x18C\x18D\t\x6\x2\x2"+
		"\x18D-\x3\x2\x2\x2\x18E\x18F\t\a\x2\x2\x18F/\x3\x2\x2\x2\x190\x191\t\b"+
		"\x2\x2\x191\x31\x3\x2\x2\x2\x192\x193\t\t\x2\x2\x193\x33\x3\x2\x2\x2\x194"+
		"\x195\t\n\x2\x2\x195\x35\x3\x2\x2\x2\x196\x197\a/\x2\x2\x197\x198\x5\x30"+
		"\x19\x2\x198\x199\a\x30\x2\x2\x199\x37\x3\x2\x2\x2\x19A\x19B\a/\x2\x2"+
		"\x19B\x19C\t\v\x2\x2\x19C\x19D\a\x30\x2\x2\x19D\x39\x3\x2\x2\x2\x19E\x19F"+
		"\a/\x2\x2\x19F\x1A0\x5@!\x2\x1A0\x1A1\a\x30\x2\x2\x1A1;\x3\x2\x2\x2\x1A2"+
		"\x1A3\a/\x2\x2\x1A3\x1AD\x5\x32\x1A\x2\x1A4\x1AB\t\f\x2\x2\x1A5\x1AC\x5"+
		"T+\x2\x1A6\x1AC\x5V,\x2\x1A7\x1A8\a\x33\x2\x2\x1A8\x1A9\x5@!\x2\x1A9\x1AA"+
		"\a\x34\x2\x2\x1AA\x1AC\x3\x2\x2\x2\x1AB\x1A5\x3\x2\x2\x2\x1AB\x1A6\x3"+
		"\x2\x2\x2\x1AB\x1A7\x3\x2\x2\x2\x1AC\x1AE\x3\x2\x2\x2\x1AD\x1A4\x3\x2"+
		"\x2\x2\x1AD\x1AE\x3\x2\x2\x2\x1AE\x1AF\x3\x2\x2\x2\x1AF\x1B0\a\x30\x2"+
		"\x2\x1B0=\x3\x2\x2\x2\x1B1\x1B2\t\r\x2\x2\x1B2?\x3\x2\x2\x2\x1B3\x1B9"+
		"\x5\x42\"\x2\x1B4\x1B5\a\x43\x2\x2\x1B5\x1B6\x5@!\x2\x1B6\x1B7\a\x3\x2"+
		"\x2\x1B7\x1B8\x5@!\x2\x1B8\x1BA\x3\x2\x2\x2\x1B9\x1B4\x3\x2\x2\x2\x1B9"+
		"\x1BA\x3\x2\x2\x2\x1BA\x41\x3\x2\x2\x2\x1BB\x1C0\x5\x44#\x2\x1BC\x1BD"+
		"\a\x44\x2\x2\x1BD\x1BF\x5\x44#\x2\x1BE\x1BC\x3\x2\x2\x2\x1BF\x1C2\x3\x2"+
		"\x2\x2\x1C0\x1BE\x3\x2\x2\x2\x1C0\x1C1\x3\x2\x2\x2\x1C1\x43\x3\x2\x2\x2"+
		"\x1C2\x1C0\x3\x2\x2\x2\x1C3\x1C8\x5\x46$\x2\x1C4\x1C5\a\x45\x2\x2\x1C5"+
		"\x1C7\x5\x46$\x2\x1C6\x1C4\x3\x2\x2\x2\x1C7\x1CA\x3\x2\x2\x2\x1C8\x1C6"+
		"\x3\x2\x2\x2\x1C8\x1C9\x3\x2\x2\x2\x1C9\x45\x3\x2\x2\x2\x1CA\x1C8\x3\x2"+
		"\x2\x2\x1CB\x1D0\x5H%\x2\x1CC\x1CD\a\x46\x2\x2\x1CD\x1CF\x5H%\x2\x1CE"+
		"\x1CC\x3\x2\x2\x2\x1CF\x1D2\x3\x2\x2\x2\x1D0\x1CE\x3\x2\x2\x2\x1D0\x1D1"+
		"\x3\x2\x2\x2\x1D1G\x3\x2\x2\x2\x1D2\x1D0\x3\x2\x2\x2\x1D3\x1D8\x5J&\x2"+
		"\x1D4\x1D5\t\xE\x2\x2\x1D5\x1D7\x5J&\x2\x1D6\x1D4\x3\x2\x2\x2\x1D7\x1DA"+
		"\x3\x2\x2\x2\x1D8\x1D6\x3\x2\x2\x2\x1D8\x1D9\x3\x2\x2\x2\x1D9I\x3\x2\x2"+
		"\x2\x1DA\x1D8\x3\x2\x2\x2\x1DB\x1E0\x5L\'\x2\x1DC\x1DD\t\xF\x2\x2\x1DD"+
		"\x1DF\x5L\'\x2\x1DE\x1DC\x3\x2\x2\x2\x1DF\x1E2\x3\x2\x2\x2\x1E0\x1DE\x3"+
		"\x2\x2\x2\x1E0\x1E1\x3\x2\x2\x2\x1E1K\x3\x2\x2\x2\x1E2\x1E0\x3\x2\x2\x2"+
		"\x1E3\x1E8\x5N(\x2\x1E4\x1E5\t\x10\x2\x2\x1E5\x1E7\x5N(\x2\x1E6\x1E4\x3"+
		"\x2\x2\x2\x1E7\x1EA\x3\x2\x2\x2\x1E8\x1E6\x3\x2\x2\x2\x1E8\x1E9\x3\x2"+
		"\x2\x2\x1E9M\x3\x2\x2\x2\x1EA\x1E8\x3\x2\x2\x2\x1EB\x1F0\x5P)\x2\x1EC"+
		"\x1ED\t\f\x2\x2\x1ED\x1EF\x5P)\x2\x1EE\x1EC\x3\x2\x2\x2\x1EF\x1F2\x3\x2"+
		"\x2\x2\x1F0\x1EE\x3\x2\x2\x2\x1F0\x1F1\x3\x2\x2\x2\x1F1O\x3\x2\x2\x2\x1F2"+
		"\x1F0\x3\x2\x2\x2\x1F3\x1F8\x5R*\x2\x1F4\x1F5\t\x11\x2\x2\x1F5\x1F7\x5"+
		"R*\x2\x1F6\x1F4\x3\x2\x2\x2\x1F7\x1FA\x3\x2\x2\x2\x1F8\x1F6\x3\x2\x2\x2"+
		"\x1F8\x1F9\x3\x2\x2\x2\x1F9Q\x3\x2\x2\x2\x1FA\x1F8\x3\x2\x2\x2\x1FB\x1FC"+
		"\a\x31\x2\x2\x1FC\x206\x5R*\x2\x1FD\x1FE\a\x32\x2\x2\x1FE\x206\x5R*\x2"+
		"\x1FF\x200\a\x33\x2\x2\x200\x201\x5@!\x2\x201\x202\a\x34\x2\x2\x202\x206"+
		"\x3\x2\x2\x2\x203\x206\x5T+\x2\x204\x206\x5V,\x2\x205\x1FB\x3\x2\x2\x2"+
		"\x205\x1FD\x3\x2\x2\x2\x205\x1FF\x3\x2\x2\x2\x205\x203\x3\x2\x2\x2\x205"+
		"\x204\x3\x2\x2\x2\x206S\x3\x2\x2\x2\x207\x208\t\x12\x2\x2\x208U\x3\x2"+
		"\x2\x2\x209\x20A\a\xB2\x2\x2\x20AW\x3\x2\x2\x2\x31\\\x63hnsvz}\x81\x85"+
		"\x89\x96\x9E\xB5\xBE\xC8\xCE\xFF\x106\x10D\x112\x11E\x125\x12E\x135\x13C"+
		"\x143\x14A\x151\x158\x15F\x16D\x177\x17B\x188\x1AB\x1AD\x1B9\x1C0\x1C8"+
		"\x1D0\x1D8\x1E0\x1E8\x1F0\x1F8\x205";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Spect.Net.Assembler.Generated
